---
- name: "Collection {{ ansible_collection_name }} version {{ version }}{{ ('(git ' ~ git_tag ~ ')') if git_tag }} loaded from {{ collection_path }}"
  tags: [always, avd_version]
  ansible.builtin.set_fact:
    avd_collection_version: version
  vars:
    versions: "{{ lookup('pipe', 'ansible-galaxy collection list --format yaml ' ~ ansible_collection_name) | from_yaml }}"
    collection_path: "{{ (role_path | split('/'))[0:-4] | join('/') }}"
    version: "{{ versions[collection_path][ansible_collection_name].version | default('Unknown') }}"
    git_tag: "{{ lookup('pipe', 'git -C ' ~ collection_path ~ ' describe --tags --always 2>/dev/null', errors='ignore') }}"
  run_once: true
  failed_when: false

- name: Import AVD eos_designs schema
  tags: [always, schema]
  run_once: true
  ansible.builtin.set_fact:
    schema: "{{ query('ansible.builtin.file', *schema_files) | map('from_yaml') | combine(recursive=True) }}"
  vars:
    schema_files: "{{ query('ansible.builtin.fileglob', 'vars/schemas/*.schema.yml') }}"

- name: Export AVD Schema
  tags: [always, schema]
  ansible.builtin.copy:
    content: "{{ schema | to_nice_yaml(indent=2) }}"
    dest: "{{ lookup('env', 'PWD') }}/output_avd_schema.yml"
  delegate_to: localhost

- name: Convert Schema To Studios Format
  tags: [always, schema]
  ansible.builtin.set_fact:
    studios_schema: "{{ schema | arista.avd.convert_schema }}"
  delegate_to: localhost

- name: Export Studios Schema
  tags: [always, schema]
  ansible.builtin.copy:
    content: "{{ studios_schema | to_nice_yaml(indent=2) }}"
    dest: "{{ lookup('env', 'PWD') }}/output_studios_schema.yml"
  delegate_to: localhost

- name: Build Studio from Schema and Studio Design
  tags: [always, schema]
  ansible.builtin.debug:
    msg: "{{ schema | arista.avd.build_studio }}"
  delegate_to: localhost

- name: Build Studio from Schema and Studio Design
  tags: [always, schema]
  ansible.builtin.set_fact:
    studio: "{{ schema | arista.avd.build_studio }}"
  delegate_to: localhost

- name: Export Studio
  tags: [always, schema]
  ansible.builtin.copy:
    content: "{{ studio | to_nice_yaml(indent=2) }}"
    dest: "{{ lookup('env', 'PWD') }}/output_studio.yml"
  delegate_to: localhost

- name: Generate UUIDs
  tags: [deploy, build, submit]
  ansible.builtin.set_fact:
    workspace_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    studio_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    #studio_uuid: "b0bb0fa9-862f-5148-8fb6-b9b8e7621eb6"
  delegate_to: localhost

- name: Create Workspace on CloudVision
  tags: [deploy, build, submit]
  delegate_to: localhost
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/resources/workspace/v1/WorkspaceConfig"
    validate_certs: false
    headers:
      Cookie: "access_token={{ ansible_password }}"
    method: POST
    body_format: json
    body: {
      "key": {"workspace_id": "{{ workspace_uuid }}"},
      "display_name": "Ansible-test",
      "description": "Testing from Ansible"
    }

- name: Create Studio on CloudVision
  tags: [deploy, build, submit]
  delegate_to: localhost
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/resources/studio/v1/StudioConfig"
    validate_certs: false
    headers:
      Cookie: "access_token={{ ansible_password }}"
    method: POST
    body_format: json
    body: "{{ studio | ansible.builtin.combine(key) }}"
    vars:
      body: {
        "key": {
          "studio_id": "{{ studio_uuid }}",
          "workspace_id": "{{ workspace_uuid }}"
        },
        "template": {
          "type": "TEMPLATE_TYPE_MAKO",
          "body": "{{ lookup('template', 'studios/studio_template.j2') }}"
        },
      }

- name: Build Workspace on CloudVision
  tags: [build, submit]
  delegate_to: localhost
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/resources/workspace/v1/WorkspaceConfig"
    validate_certs: false
    headers:
      Cookie: "access_token={{ ansible_password }}"
    method: POST
    body_format: json
    body: {
      "key": {"workspace_id": "{{ workspace_uuid }}"},
      "request": "REQUEST_START_BUILD",
      "request_params": {
        "request_id": "{{ request_uuid }}"
      }
    }
  vars:
    request_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"

- name: Submit Workspace on CloudVision
  tags: [submit]
  delegate_to: localhost
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/resources/workspace/v1/WorkspaceConfig"
    validate_certs: false
    headers:
      Cookie: "access_token={{ ansible_password }}"
    method: POST
    body_format: json
    body: {
      "key": {"workspace_id": "{{ workspace_uuid }}"},
      "request":"REQUEST_SUBMIT",
      "request_params": {
        "request_id": "{{ request_uuid }}"
      }
    }
  vars:
    request_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
