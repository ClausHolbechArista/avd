---
- name: "Collection {{ ansible_collection_name }} version {{ version }}{{ ('(git ' ~ git_tag ~ ')') if git_tag }} loaded from {{ collection_path }}"
  tags: [always, avd_version]
  set_fact:
    avd_collection_version: version
  vars:
    versions: "{{ lookup('pipe', 'ansible-galaxy collection list --format yaml ' ~ ansible_collection_name) | from_yaml }}"
    collection_path: "{{ (role_path | split('/'))[0:-4] | join('/') }}"
    version: "{{ versions[collection_path][ansible_collection_name].version | default('Unknown') }}"
    git_tag: "{{ lookup('pipe', 'git -C ' ~ collection_path ~ ' describe --tags --always 2>/dev/null', errors='ignore') }}"
  run_once: true
  failed_when: false

- name: Import AVD eos_designs schema
  run_once: true
  set_fact:
    schema: "{{ query('ansible.builtin.file', *schema_files) | map('from_yaml') | combine(recursive=True) }}"
  vars:
    schema_files: "{{ query('ansible.builtin.fileglob', 'vars/schemas/*.schema.yml') }}"

- name: Export AVD Schema
  ansible.builtin.copy:
    content: "{{ schema | to_nice_yaml(indent=2) }}"
    dest: "{{ lookup('env', 'PWD') }}/output_avd_schema.yml"
  delegate_to: localhost

- name: Convert Schema To Studios Format
  ansible.builtin.copy:
    content: "{{ schema | arista.avd.convert_schema | to_nice_yaml(indent=2) }}"
    dest: "{{ lookup('env', 'PWD') }}/output_studios_schema.yml"
  delegate_to: localhost
