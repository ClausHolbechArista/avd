{
  "type": "object",
  "properties": {
    "application_traffic_recognition": {
      "type": "object",
      "description": "PREVIEW: WAN Preview",
      "title": "Application Traffic Recognition"
    },
    "avd_data_conversion_mode": {
      "type": "string",
      "enum": [
        "disabled",
        "error",
        "warning",
        "info",
        "debug",
        "quiet"
      ],
      "default": "debug",
      "description": "Conversion Mode for AVD input data conversion.\nInput data conversion will perform type conversion of input variables as defined in the schema.\nThe type conversion is intended to help the user to identify minor issues with the input data, while still allowing the data to be validated.\nDuring conversion, messages will generated with information about the host(s) and key(s) which required conversion.\n\"disabled\" means that conversion will not run - avoid this since conversion is also handling data deprecation and upgrade.\n\"error\" will produce error messages and fail the task.\n\"warning\" will produce warning messages.\n\"info\" will produce regular log messages.\n\"debug\" will produce hidden debug messages viewable with -v.\n\"quiet\" will not produce any messages\n",
      "title": "AVD Data Conversion Mode"
    },
    "avd_data_validation_mode": {
      "type": "string",
      "enum": [
        "disabled",
        "error",
        "warning",
        "info",
        "debug"
      ],
      "default": "warning",
      "description": "Validation Mode for AVD input data validation.\nInput data validation will validate the input variables according to the schema.\nDuring validation, messages will generated with information about the host(s) and key(s) which failed validation.\n\"disabled\" means that validation will not run.\n\"error\" will produce error messages and fail the task.\n\"warning\" will produce warning messages.\n\"info\" will produce regular log messages.\n\"debug\" will produce hidden debug messages viewable with -v.\n",
      "title": "AVD Data Validation Mode"
    },
    "bfd_multihop": {
      "type": "object",
      "description": "BFD Multihop tuning.",
      "properties": {
        "interval": {
          "type": "integer",
          "minimum": 50,
          "maximum": 60000,
          "title": "Interval"
        },
        "min_rx": {
          "type": "integer",
          "minimum": 50,
          "maximum": 60000,
          "title": "Min RX"
        },
        "multiplier": {
          "type": "integer",
          "minimum": 3,
          "maximum": 50,
          "title": "Multiplier"
        }
      },
      "required": [
        "interval",
        "min_rx",
        "multiplier"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "default": {
        "interval": 300,
        "min_rx": 300,
        "multiplier": 3
      },
      "title": "BFD Multihop"
    },
    "bgp_as": {
      "description": "AS number to use to configure overlay when \"overlay_routing_protocol\" == ibgp.",
      "type": "string",
      "title": "BGP As"
    },
    "bgp_default_ipv4_unicast": {
      "description": "Default activation of IPv4 unicast address-family on all IPv4 neighbors.\nIt is best practice to disable activation.\n",
      "type": "boolean",
      "default": false,
      "title": "BGP Default IPv4 Unicast"
    },
    "bgp_distance": {
      "type": "object",
      "title": "BGP Distance"
    },
    "bgp_ecmp": {
      "description": "Maximum ECMP for BGP multi-path.",
      "type": "integer",
      "default": 4,
      "title": "BGP ECMP"
    },
    "bgp_graceful_restart": {
      "description": "BGP graceful-restart allows a BGP speaker with separate control plane and data plane processing to continue forwarding traffic during a BGP restart.\nIts neighbors (receiving speakers) may retain routing information from the restarting speaker while a BGP session with it is being re-established, reducing route flapping.\n",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable graceful-restart for all BGP peers.",
          "title": "Enabled"
        },
        "restart_time": {
          "type": "integer",
          "minimum": 1,
          "maximum": 3600,
          "default": 300,
          "description": "Restart time in seconds.",
          "title": "Restart Time"
        }
      },
      "required": [
        "enabled"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "BGP Graceful Restart"
    },
    "bgp_maximum_paths": {
      "description": "Maximum Paths for BGP multi-path.",
      "type": "integer",
      "default": 4,
      "minimum": 1,
      "maximum": 512,
      "title": "BGP Maximum Paths"
    },
    "bgp_mesh_pes": {
      "type": "boolean",
      "default": false,
      "description": "Configure an iBGP full mesh between PEs, either because there is no RR used or other reasons.\nOnly supported in combination with MPLS overlay.\n",
      "title": "BGP Mesh PEs"
    },
    "bgp_peer_groups": {
      "description": "Leverage an Arista EOS switch to generate the encrypted password using the correct peer group name.\nNote that the name of the peer groups use '-' instead of '_' in EOS configuration.\n",
      "type": "object",
      "properties": {
        "ipv4_underlay_peers": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "IPv4-UNDERLAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": false,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "IPv4 Underlay Peers"
        },
        "mlag_ipv4_underlay_peer": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "MLAG-IPv4-UNDERLAY-PEER",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": false,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "MLAG IPv4 Underlay Peer"
        },
        "evpn_overlay_peers": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "EVPN-OVERLAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": true,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "EVPN Overlay Peers"
        },
        "evpn_overlay_core": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "EVPN-OVERLAY-CORE",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": true,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "EVPN Overlay Core"
        },
        "mpls_overlay_peers": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "MPLS-OVERLAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": true,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "MPLS Overlay Peers"
        },
        "rr_overlay_peers": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "RR-OVERLAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": true,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Rr Overlay Peers"
        },
        "ipvpn_gateway_peers": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": "IPVPN-GATEWAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": true,
              "title": "BFD"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Ipvpn Gateway Peers"
        },
        "wan_overlay_peers": {
          "type": "object",
          "description": "PREVIEW: This key is currently not supported",
          "properties": {
            "name": {
              "type": "string",
              "default": "WAN-OVERLAY-PEERS",
              "description": "Name of peer group.",
              "title": "Name"
            },
            "password": {
              "type": "string",
              "description": "Type 7 encrypted password.",
              "title": "Password"
            },
            "bfd": {
              "type": "boolean",
              "default": false,
              "title": "BFD"
            },
            "listen_range_prefixes": {
              "type": "array",
              "description": "Only used for nodes where `wan_role` is `server` like AutoVPN RRs and Pathfinders.\nFor clients, AVD will raise an error if the Loopback0 IP is not in any listen range.",
              "items": {
                "type": "string",
                "description": "The prefixes to use in listen_range."
              },
              "title": "Listen Range Prefixes"
            },
            "structured_config": {
              "type": "object",
              "description": "Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.",
              "title": "Structured Config"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Wan Overlay Peers"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "BGP Peer Groups"
    },
    "bgp_update_wait_install": {
      "type": "boolean",
      "title": "BGP Update Wait Install"
    },
    "bgp_update_wait_for_convergence": {
      "type": "boolean",
      "title": "BGP Update Wait For Convergence"
    },
    "connected_endpoints_keys": {
      "description": "Endpoints connecting to the fabric can be grouped by using separate keys.\nThe keys can be customized to provide a better better organization or grouping of your data.\n`connected_endpoints_keys` should be defined in the top level group_vars for the fabric.\nThe default values will be overridden if defining this key, so it is recommended to copy the defaults and modify them.\n",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "type": {
            "type": "string",
            "description": "Type used for documentation.",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "description": "Description used for documentation.",
            "title": "Description"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "key"
        ]
      },
      "default": [
        {
          "key": "servers",
          "type": "server",
          "description": "Server"
        },
        {
          "key": "firewalls",
          "type": "firewall",
          "description": "Firewall"
        },
        {
          "key": "routers",
          "type": "router",
          "description": "Router"
        },
        {
          "key": "load_balancers",
          "type": "load_balancer",
          "description": "Load Balancer"
        },
        {
          "key": "storage_arrays",
          "type": "storage_array",
          "description": "Storage Array"
        },
        {
          "key": "cpes",
          "type": "cpe",
          "description": "CPE"
        },
        {
          "key": "workstations",
          "type": "workstation",
          "description": "Workstation"
        },
        {
          "key": "access_points",
          "type": "access_point",
          "description": "Access Point"
        },
        {
          "key": "phones",
          "type": "phone",
          "description": "Phone"
        },
        {
          "key": "printers",
          "type": "printer",
          "description": "Printer"
        },
        {
          "key": "cameras",
          "type": "camera",
          "description": "Camera"
        },
        {
          "key": "generic_devices",
          "type": "generic_device",
          "description": "Generic Device"
        }
      ],
      "title": "Connected Endpoints Keys"
    },
    "core_interfaces": {
      "type": "object",
      "title": "Core Interfaces"
    },
    "custom_structured_configuration_list_merge": {
      "type": "string",
      "description": "The List-merge strategy used when merging custom structured configurations.\n\nThis applies to all vars prefixed by prefixes in `custom_structured_configuration_prefix`\nand all data under the various `structured_config` options.\n\nThe available list merge strategies:\n- `replace`:\n  - Any list will be replaced with the list defined in custom structured configurations.\n- `append`:\n  - Existing list items with the same \"Primary key\"-value will be updated.\n  - New items will be appended to the existing list (including duplicates).\n- `keep`:\n  - Only set list if there is no existing list or existing list is `None`.\n- `prepend`:\n  - Existing list items with the same \"Primary key\"-value will be updated.\n  - New items will be prepended to the existing list (including duplicates).\n- `append_rp`:\n  - Existing list items with the same \"Primary key\"-value will be updated.\n  - New unique items will be appended to the existing list.\n- `prepend_rp`:\n  - Existing list items with the same \"Primary key\"-value will be updated.\n  - New unique items will be prepended to the existing list.\n",
      "enum": [
        "replace",
        "append",
        "keep",
        "prepend",
        "append_rp",
        "prepend_rp"
      ],
      "default": "append_rp",
      "title": "Custom Structured Configuration List Merge"
    },
    "custom_structured_configuration_prefix": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Custom EOS Structured Configuration keys can be set on any group or host_var level using the name\nof the corresponding `eos_cli_config_gen` key prefixed with content of `custom_structured_configuration_prefix`.\n\nThe content of Custom Structured Configuration variables will be merged with the structured config generated by the eos_designs role.\n\nThe merge is done recursively, so it is possible to update a sub-key of a variable set by `eos_designs` role already.\n\nThe merge follow these recursive merge strategies:\n- New keys will be added for all types.\n- Existing keys of type \"List\" with a \"Primary key\" set in the schema:\n  - Strategy can be changed with `custom_structured_configuration_list_merge`. Default strategy:\n    - Existing list items with the same \"Primary key\"-value will be updated.\n    - New unique items will be appended to the existing list\n- Other keys of type \"List\" will have new unique items appended the the existing list.\n- Existing keys of type \"Dictionary\" will recursively merge\n- Other existing keys will be replaced.\n",
      "default": [
        "custom_structured_configuration_"
      ],
      "title": "Custom Structured Configuration Prefix"
    },
    "cv_pathfinder_regions": {
      "description": "PREVIEW: This key is currently not supported\nDefine the SDWAN hierarchy for the device.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "description": "The region ID must be unique for the whole WAN deployment.",
            "title": "ID"
          },
          "sites": {
            "type": "array",
            "description": "All sites are placed in a default zone called DEFAULT-ZONE with ID 1.",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "title": "Description"
                },
                "id": {
                  "type": "integer",
                  "description": "The site ID must be unique within a zone.\nGiven that all the sites are placed in the DEFAULT-ZONE, the site ID must be unique within a region.",
                  "title": "ID"
                },
                "location": {
                  "type": "string",
                  "description": "Will be interpreted",
                  "title": "Location"
                },
                "site_contact": {
                  "type": "string",
                  "title": "Site Contact"
                },
                "site_after_hours_contact": {
                  "type": "string",
                  "title": "Site After Hours Contact"
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              },
              "required": [
                "name"
              ]
            },
            "title": "Sites"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "name"
        ]
      },
      "title": "Cv Pathfinder Regions"
    },
    "cv_tags_topology_type": {
      "description": "PREVIEW: This key is currently not supported\nDevice type that CloudVision should use when generating the Topology. Defaults to the setting under node_type_keys.",
      "type": "string",
      "enum": [
        "leaf",
        "spine",
        "core",
        "edge"
      ],
      "title": "Cv Tags Topology Type"
    },
    "cv_topology": {
      "type": "array",
      "description": "Generate AVD configurations directly from the given CloudVision topology.\nActivate this feature by setting `use_cv_topology` to `true`.\nRequires `default_interfaces` to be set for the relevant platforms and node types to detect the proper interface roles automatically.\nNeighbor hostnames must match the inventory hostnames of the AVD inventory to be taken into consideration.",
      "items": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "title": "Hostname"
          },
          "platform": {
            "type": "string",
            "title": "Platform"
          },
          "interfaces": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Name"
                },
                "neighbor": {
                  "type": "string",
                  "title": "Neighbor"
                },
                "neighbor_interface": {
                  "type": "string",
                  "title": "Neighbor Interface"
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              },
              "required": [
                "name"
              ]
            },
            "title": "Interfaces"
          }
        },
        "required": [
          "platform",
          "interfaces",
          "hostname"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Cv Topology"
    },
    "cvp_ingestauth_key": {
      "type": "string",
      "description": "On-premise CVP ingest auth key. If set, TerminAttr will be configured with key-based authentication for on-premise CVP.\nIf not set, TerminAttr will be configured with certificate based authentication:\n- On-premise using token onboarding. Default token path is '/tmp/token'.\n- CVaaS using token-secure onboarding. Default token path is '/tmp/cv-onboarding-token'.\nToken must be copied to the device first.",
      "title": "CVP Ingestauth Key"
    },
    "cvp_instance_ip": {
      "type": "string",
      "description": "IPv4 address or DNS name for CloudVision.\nThis variable only supports an on-premise single-node cluster or the DNS name of a CloudVision as a Service instance.\n\nThis key is deprecated. Support will be removed in AVD version 5.0.0. Use <samp>cvp_instance_ips</samp> instead.",
      "deprecated": true,
      "title": "CVP Instance IP"
    },
    "cvp_instance_ips": {
      "type": "array",
      "description": "List of IPv4 addresses or DNS names for CloudVision.\nFor on-premise CloudVision enter all the nodes of the cluster.\nFor CloudVision as a Service enter the DNS name of the instance.\n`eos_designs` only supports one CloudVision cluster.\n",
      "items": {
        "type": "string",
        "description": "IPv4 address or DNS name for CloudVision"
      },
      "title": "CVP Instance Ips"
    },
    "cvp_token_file": {
      "type": "string",
      "description": "cvp_token_file is the path to the token file on the switch.\nIf not set the default locations for on-premise or CVaaS will be used.\nSee cvp_ingestauth_key for details.",
      "title": "CVP Token File"
    },
    "dc_name": {
      "description": "POD Name is used in:\n- Fabric Documentation (Optional, falls back to fabric_name)\n- SNMP Location: `snmp_settings.location` (Optional)\n- HER Overlay DC scoped flood lists: `overlay_her_flood_list_scope: dc` (Required)\n",
      "type": "string",
      "title": "DC Name"
    },
    "default_igmp_snooping_enabled": {
      "description": "When set to false, disables IGMP snooping at fabric level and overrides per vlan settings.\n",
      "type": "boolean",
      "default": true,
      "title": "Default IGMP Snooping Enabled"
    },
    "default_interfaces": {
      "type": "array",
      "description": "Default uplink, downlink, and MLAG interfaces, which will be used if these interfaces are not defined on a device (either directly or through inheritance).\n",
      "items": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "description": "List of node type keys.",
            "items": {
              "type": "string"
            },
            "title": "Types"
          },
          "platforms": {
            "type": "array",
            "description": "List of platform families.\nThis is defined as a Python regular expression that matches the full platform type.\n",
            "items": {
              "type": "string",
              "description": "Arista platform family regular expression."
            },
            "title": "Platforms"
          },
          "uplink_interfaces": {
            "type": "array",
            "description": "List of uplink interfaces or uplink interface ranges.",
            "items": {
              "type": "string",
              "description": "Interface range or interface."
            },
            "title": "Uplink Interfaces"
          },
          "mlag_interfaces": {
            "type": "array",
            "description": "List of MLAG interfaces or MLAG interface ranges.",
            "items": {
              "type": "string",
              "description": "Interface range or interface."
            },
            "title": "MLAG Interfaces"
          },
          "downlink_interfaces": {
            "type": "array",
            "description": "List of downlink interfaces or downlink interface ranges.",
            "items": {
              "type": "string",
              "description": "Interface range or interface."
            },
            "title": "Downlink Interfaces"
          }
        },
        "required": [
          "types",
          "platforms"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Default Interfaces"
    },
    "default_mgmt_method": {
      "type": "string",
      "description": "`default_mgmt_method` controls the default VRF and source interface used for the following management and monitoring protocols configured with `eos_designs`:\n  - `cv_settings`\n  - `dns_settings`\n  - `ntp_settings`\n  - `sflow_settings`\n\n`oob` means the protocols will be configured with the VRF set by `mgmt_interface_vrf` and `mgmt_interface` as the source interface.\n`inband` means the protocols will be configured with the VRF set by `inband_mgmt_vrf` and `inband_mgmt_interface` as the source interface.\n`none` means the VRF and or interface must be manually set for each protocol.\nThis can be overridden under the settings for each protocol.\n",
      "enum": [
        "oob",
        "inband",
        "none"
      ],
      "default": "oob",
      "title": "Default Management Method"
    },
    "default_node_types": {
      "type": "array",
      "description": "Uses hostname matches against a regular expression to determine the node type.",
      "items": {
        "type": "object",
        "properties": {
          "node_type": {
            "type": "string",
            "description": "Resulting node type when regex matches.",
            "title": "Node Type"
          },
          "match_hostnames": {
            "type": "array",
            "description": "Regular expressions to match against hostnames.",
            "items": {
              "type": "string",
              "description": "Regex needs to match full hostname (i.e. is bounded by ^ and $ elements)."
            },
            "title": "Match Hostnames"
          }
        },
        "required": [
          "match_hostnames",
          "node_type"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Default Node Types"
    },
    "design": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "By setting the design.type variable, the default node-types and templates described in these documents will be used.\n",
          "enum": [
            "l3ls-evpn",
            "mpls",
            "l2ls"
          ],
          "default": "l3ls-evpn",
          "title": "Type"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Design"
    },
    "enable_trunk_groups": {
      "type": "boolean",
      "description": "Enable Trunk Group support across eos_designs.\nWarning: Because of the nature of the EOS Trunk Group feature, enabling this is \"all or nothing\".\n*All* vlans and *all* trunks towards connected endpoints must be using trunk groups as well.\nIf trunk groups are not assigned to a trunk, no vlans will be enabled on that trunk.\nSee \"Details on enable_trunk_groups\" below before enabling this feature.\n",
      "default": false,
      "title": "Enable Trunk Groups"
    },
    "eos_designs_custom_templates": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template file.",
            "title": "Template"
          },
          "options": {
            "description": "Template options.",
            "type": "object",
            "properties": {
              "list_merge": {
                "type": "string",
                "description": "Merge strategy for lists.",
                "default": "append_rp",
                "title": "List Merge"
              },
              "strip_empty_keys": {
                "type": "boolean",
                "description": "Filter out keys from the generated output if value is null/none/undefined.",
                "default": true,
                "title": "Strip Empty Keys"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Options"
          }
        },
        "required": [
          "template"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "EOS Designs Custom Templates"
    },
    "eos_designs_documentation": {
      "description": "Control fabric documentation generation.\n",
      "type": "object",
      "properties": {
        "connected_endpoints": {
          "description": "Generate fabric-wide documentation for connected endpoints.\n",
          "type": "boolean",
          "default": false,
          "title": "Connected Endpoints"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "EOS Designs Documentation"
    },
    "event_handlers": {
      "type": "array",
      "title": "Event Handlers"
    },
    "evpn_ebgp_gateway_inter_domain": {
      "type": "boolean",
      "title": "EVPN Ebgp Gateway Inter Domain"
    },
    "evpn_ebgp_gateway_multihop": {
      "description": "Default of 15, considering a large value to avoid BGP reachability issues in very complex DCI networks.\nAdapt the value for your specific topology.\n",
      "type": "integer",
      "default": 15,
      "title": "EVPN Ebgp Gateway Multihop"
    },
    "evpn_ebgp_multihop": {
      "description": "Default of 3, the recommended value for a 3 stage spine and leaf topology.\nSet to a higher value to allow for very large and complex topologies.\n",
      "type": "integer",
      "default": 3,
      "title": "EVPN Ebgp Multihop"
    },
    "evpn_hostflap_detection": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "If set to false it will disable EVPN host-flap detection.",
          "type": "boolean",
          "default": true,
          "title": "Enabled"
        },
        "threshold": {
          "description": "Minimum number of MAC moves that indicate a MAC duplication issue.",
          "type": "integer",
          "default": 5,
          "title": "Threshold"
        },
        "window": {
          "description": "Time (in seconds) to detect a MAC duplication issue.",
          "type": "integer",
          "default": 180,
          "title": "Window"
        },
        "expiry_timeout": {
          "description": "Time (in seconds) to purge a MAC duplication issue.",
          "type": "integer",
          "title": "Expiry Timeout"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "EVPN Hostflap Detection"
    },
    "evpn_import_pruning": {
      "description": "Enable VPN import pruning (Min. EOS 4.24.2F).\nThe Route Target extended communities carried by incoming VPN paths will be examined.\nIf none of those Route Targets have been configured for import, the path will be immediately discarded.\n",
      "type": "boolean",
      "default": false,
      "title": "EVPN Import Pruning"
    },
    "evpn_multicast": {
      "type": "boolean",
      "description": "General Configuration required for EVPN Multicast. \"evpn_l2_multicast\" or \"evpn_l3_multicast\" must also be configured under the Network Services (tenants).\nRequires \"underlay_multicast: true\" and IGMP snooping enabled globally (default).\nFor MLAG devices Route Distinguisher must be unique since this feature will create multi-vtep configuration.\nWarning !!! For Trident3 based platforms i.e 7050X3, 7300X3, 720XP and 722XP\n  The Following default platform setting will be configured: \"platform trident forwarding-table partition flexible exact-match 16384 l2-shared 98304 l3-shared 131072\"\n  All forwarding agents will be restarted when this configuration is applied.\n  You can tune the settings by overriding the default variable: \"platform_settings[platforms].trident_forwarding_table_partition:\"\n  Please contact an Arista representative for help with determining the appropriate values for your environment.\n",
      "default": false,
      "title": "EVPN Multicast"
    },
    "evpn_overlay_bgp_rtc": {
      "description": "Enable Route Target Membership Constraint Address Family on EVPN overlay BGP peerings (Min. EOS 4.25.1F).\nRequires use eBGP as overlay protocol.\n",
      "type": "boolean",
      "default": false,
      "title": "EVPN Overlay BGP Rtc"
    },
    "evpn_prevent_readvertise_to_server": {
      "description": "Configure route-map on eBGP sessions towards route-servers, where prefixes with the peer's ASN in the AS Path are filtered away.\nThis is very useful in large-scale networks, where convergence will be quicker by not returning all updates received\nfrom Route-server-1 to Router-server-2 just for Route-server-2 to throw them away because of AS Path loop detection.\n",
      "type": "boolean",
      "default": false,
      "title": "EVPN Prevent Readvertise To Server"
    },
    "evpn_short_esi_prefix": {
      "description": "Configure prefix for \"short_esi\" values.",
      "type": "string",
      "default": "0000:0000:",
      "title": "EVPN Short Esi Prefix"
    },
    "evpn_vlan_aware_bundles": {
      "description": "Enable vlan aware bundles for EVPN MAC-VRF.",
      "type": "boolean",
      "default": false,
      "title": "EVPN VLAN Aware Bundles"
    },
    "evpn_vlan_bundles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Specify an EVPN vlan-aware-bundle name.\nEVPN vlan-aware-bundles group L2 VLANs and define common settings.\n",
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "description": "\"id\" may be used for vlan-aware-bundle RD/RT ID so it should not overlap with l2vlan IDs which are not part of this bundle.\nSee \"overlay_rd_type\" and \"overlay_rt_type\" for details.\n",
            "title": "ID"
          },
          "rt_override": {
            "type": "string",
            "description": "By default the MAC VRF bundle RT will be derived from mac_vrf_id_base + bundle_id.\nThe rt_override allows us to override this value and statically define it.\nrt_override will default to vni_override if set.\n\nrt_override supports two formats:\n  - A single number which will be used in the RT fields instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).\n  - A full RT string with colon seperator which will override the full RT.\n",
            "title": "Rt Override"
          },
          "rd_override": {
            "type": "string",
            "description": "By default the MAC VRF bundle RD will be derived from mac_vrf_id_base + bundle_id.\nThe rt_override allows us to override this value and statically define it.\nrd_override will default to rt_override or vni_override if set.\n\nrd_override supports two formats:\n  - A single number which will be used in the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).\n  - A full RD string with colon seperator which will override the full RD.\n",
            "title": "Rd Override"
          },
          "evpn_l2_multi_domain": {
            "type": "boolean",
            "description": "Explicitly extend VLAN-Aware Bundle to remote EVPN domains.\nOverrides `<network_services_key>.[].evpn_l2_multi_domain`.\n",
            "title": "EVPN L2 Multi Domain"
          },
          "bgp": {
            "type": "object",
            "properties": {
              "raw_eos_cli": {
                "type": "string",
                "description": "EOS cli commands rendered on router_bgp.vlans-aware-bundle.\n",
                "title": "Raw EOS CLI"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "BGP"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "EVPN VLAN Bundles"
    },
    "fabric_evpn_encapsulation": {
      "description": "Should be set to mpls for evpn-mpls scenario.",
      "enum": [
        "vxlan",
        "mpls"
      ],
      "default": "vxlan",
      "type": "string",
      "title": "Fabric EVPN Encapsulation"
    },
    "fabric_ip_addressing": {
      "type": "object",
      "properties": {
        "mlag": {
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "default": "first_id",
              "description": "This variable defines the Multi-chassis Link Aggregation (MLAG) algorithm used.\nEach MLAG link will have a /31* subnet with each subnet allocated from the relevant MLAG pool via a calculated offset.\nThe offset is calculated using one of the following algorithms:\n  - first_id: `(mlag_primary_id - 1) * 2` where `mlag_primary_id` is the ID of the first node defined under the node_group.\n    This allocation method will skip every other /31* subnet making it less space efficient than `odd_id`.\n  - odd_id: `(odd_id - 1) / 2`. Requires the node_group to have a node with an odd ID and a node with an even ID.\n  - same_subnet: the offset will always be zero.\n    This allocation method will cause every MLAG link to be addressed with the same /31* subnet.\n\\* - The prefix length is configurable with a default of /31.",
              "enum": [
                "first_id",
                "odd_id",
                "same_subnet"
              ],
              "title": "Algorithm"
            },
            "ipv4_prefix_length": {
              "type": "integer",
              "default": 31,
              "minimum": 1,
              "maximum": 31,
              "description": "IPv4 prefix length used for MLAG peer-vlan and L3 point-to-point SVIs over the MLAG peer-link.",
              "title": "IPv4 Prefix Length"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "MLAG"
        },
        "p2p_uplinks": {
          "type": "object",
          "properties": {
            "ipv4_prefix_length": {
              "type": "integer",
              "default": 31,
              "minimum": 1,
              "maximum": 31,
              "description": "IPv4 prefix length used for L3 point-to-point uplinks.",
              "title": "IPv4 Prefix Length"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "P2P Uplinks"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Fabric IP Addressing"
    },
    "fabric_name": {
      "description": "Fabric Name, required to match Ansible Group name covering all devices in the Fabric, **must** be an inventory group name.",
      "type": "string",
      "title": "Fabric Name"
    },
    "generate_cv_tags": {
      "type": "object",
      "description": "PREVIEW: This key is currently not supported\nGenerate CloudVision Tags based on AVD data.",
      "properties": {
        "topology_hints": {
          "type": "boolean",
          "default": false,
          "description": "Enable the generation of CloudVision Topology Tags (hints).",
          "title": "Topology Hints"
        },
        "interface_tags": {
          "description": "List of interface tags that should be generated.",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Each tag can either have a static value or a dynamic value sourced from structured configuration.",
            "properties": {
              "name": {
                "description": "Tag name to be assigned to generated tags. Tag names must be lower case.",
                "type": "string",
                "title": "Name"
              },
              "data_path": {
                "description": "Structured config field/key path to be used to find the value for the tag. Dot notation is supported to reference values inside dictionaries.\nFor Example: 'data_path: channel_group.id' would set the tag with the value of the channel id of the interface. If there is no channel id, the tag is not created.\n`data_path` is ignored if `value` is set.",
                "type": "string",
                "title": "Data Path"
              },
              "value": {
                "description": "Value to be assigned to the tag.",
                "type": "string",
                "title": "Value"
              }
            },
            "required": [
              "name"
            ],
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Interface Tags"
        },
        "device_tags": {
          "description": "List of device tags that should be generated.",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Each tag can either have a static value or a dynamic value sourced from structured configuration.",
            "properties": {
              "name": {
                "description": "Tag name to be assigned to generated tags. Tag names must be lower case.",
                "type": "string",
                "title": "Name"
              },
              "data_path": {
                "description": "Structured config field/key path to be used to find the value for the tag. Dot notation is supported to reference values inside dictionaries.\nFor Example: 'data_path: router_bfd.multihop.interval' would set the tag with the value of the interval for multihop bfd. If this value is not specified in the structured config, the tag is not created.\n`data_path` is ignored if `value` is set.",
                "type": "string",
                "title": "Data Path"
              },
              "value": {
                "description": "Value to be assigned to the tag.",
                "type": "string",
                "title": "Value"
              }
            },
            "required": [
              "name"
            ],
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Device Tags"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Generate Cv Tags"
    },
    "hardware_counters": {
      "type": "object",
      "title": "Hardware Counters"
    },
    "internal_vlan_order": {
      "type": "object",
      "description": "Internal vlan allocation order and range.",
      "properties": {
        "allocation": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "title": "Allocation"
        },
        "range": {
          "type": "object",
          "properties": {
            "beginning": {
              "type": "integer",
              "description": "First VLAN ID.",
              "minimum": 2,
              "maximum": 4094,
              "title": "Beginning"
            },
            "ending": {
              "type": "integer",
              "description": "Last VLAN ID.",
              "minimum": 2,
              "maximum": 4094,
              "title": "Ending"
            }
          },
          "required": [
            "beginning",
            "ending"
          ],
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Range"
        }
      },
      "required": [
        "allocation"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "default": {
        "allocation": "ascending",
        "range": {
          "beginning": 1006,
          "ending": 1199
        }
      },
      "title": "Internal VLAN Order"
    },
    "ipv6_mgmt_destination_networks": {
      "description": "List of IPv6 prefixes to configure as static routes towards the OOB IPv6 Management interface gateway.\nReplaces the default route.\n",
      "type": "array",
      "items": {
        "type": "string",
        "description": "IPv6_network/Mask."
      },
      "title": "IPv6 Management Destination Networks"
    },
    "ipv6_mgmt_gateway": {
      "type": "string",
      "format": "ipv6",
      "description": "OOB Management interface gateway in IPv6 format.\nUsed as next-hop for default gateway or static routes defined under 'ipv6_mgmt_destination_networks'.\n",
      "title": "IPv6 Management Gateway"
    },
    "is_deployed": {
      "description": "If the device is already deployed in the fabric.\nWhen set to false, interfaces toward this device may be shutdown depending on the `shutdown_interfaces_towards_undeployed_peers` setting.\nFurthermore `eos_config_deploy_cvp` will not attempt to move or apply configurations to the device.\n",
      "type": "boolean",
      "default": true,
      "title": "Is Deployed"
    },
    "isis_advertise_passive_only": {
      "type": "boolean",
      "default": false,
      "title": "ISIS Advertise Passive Only"
    },
    "isis_area_id": {
      "type": "string",
      "default": "49.0001",
      "title": "ISIS Area ID"
    },
    "isis_default_circuit_type": {
      "type": "string",
      "enum": [
        "level-1-2",
        "level-1",
        "level-2"
      ],
      "default": "level-2",
      "description": "These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden on link profile or link level.\n",
      "title": "ISIS Default Circuit Type"
    },
    "isis_default_is_type": {
      "title": "ISIS Default IS Type",
      "type": "string",
      "enum": [
        "level-1-2",
        "level-1",
        "level-2"
      ],
      "default": "level-2"
    },
    "isis_default_metric": {
      "type": "integer",
      "default": 50,
      "description": "These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden at link profile or link level.\n",
      "title": "ISIS Default Metric"
    },
    "isis_maximum_paths": {
      "description": "Number of path to configure in ECMP for ISIS.",
      "type": "integer",
      "title": "ISIS Maximum Paths"
    },
    "isis_ti_lfa": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "title": "Enabled"
        },
        "protection": {
          "type": "string",
          "enum": [
            "link",
            "node"
          ],
          "title": "Protection"
        },
        "local_convergence_delay": {
          "description": "Local convergence delay in milliseconds.",
          "type": "integer",
          "default": 10000,
          "title": "Local Convergence Delay"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "ISIS TI LFA"
    },
    "l3_edge": {
      "type": "object",
      "title": "L3 Edge"
    },
    "l3_interface_profiles": {
      "type": "array",
      "description": "PREVIEW: This key is currently not supported\n\nProfiles to inherit common settings for l3_interfaces defined under the node type key.\nThese profiles will *not* work for `l3_interfaces` defined under `vrfs`.",
      "items": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string",
            "description": "L3 interface profile name. Any variable supported under `l3_interfaces` can be inherited from a profile.",
            "title": "Profile"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "profile"
        ]
      },
      "title": "L3 Interface Profiles"
    },
    "local_users": {
      "type": "array",
      "title": "Local Users"
    },
    "mac_address_table": {
      "type": "object",
      "description": "MAC address-table aging time.\nUse to change the EOS default of 300.\n",
      "properties": {
        "aging_time": {
          "type": "integer",
          "description": "Aging time in seconds 10-1000000.\nEnter 0 to disable aging.\n",
          "minimum": 0,
          "maximum": 1000000,
          "title": "Aging Time"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "MAC Address Table"
    },
    "management_eapi": {
      "description": "Default is HTTPS management eAPI enabled.\nThe VRF is set to < mgmt_interface_vrf >.\n",
      "type": "object",
      "properties": {
        "enable_http": {
          "type": "boolean",
          "default": false,
          "title": "Enable HTTP"
        },
        "enable_https": {
          "type": "boolean",
          "default": true,
          "title": "Enable Https"
        },
        "default_services": {
          "type": "boolean",
          "title": "Default Services"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Management Eapi"
    },
    "mgmt_destination_networks": {
      "type": "array",
      "description": "List of IPv4 prefixes to configure as static routes towards the OOB Management interface gateway.\nReplaces the default route.",
      "items": {
        "type": "string",
        "description": "IPv4_address/Mask."
      },
      "title": "Management Destination Networks"
    },
    "mgmt_gateway": {
      "type": "string",
      "description": "OOB Management interface gateway in IPv4 format.\nUsed as next-hop for default gateway or static routes defined under 'mgmt_destination_networks'.\n",
      "title": "Management Gateway"
    },
    "mgmt_interface": {
      "type": "string",
      "default": "Management1",
      "description": "OOB Management interface.",
      "title": "Management Interface"
    },
    "mgmt_interface_description": {
      "type": "string",
      "description": "Management interface description.\n",
      "default": "oob_management",
      "title": "Management Interface Description"
    },
    "mgmt_interface_vrf": {
      "type": "string",
      "default": "MGMT",
      "description": "OOB Management VRF.",
      "title": "Management Interface VRF"
    },
    "mgmt_vrf_routing": {
      "type": "boolean",
      "default": false,
      "description": "Configure IP routing for the OOB Management VRF.",
      "title": "Management VRF Routing"
    },
    "mlag_ibgp_peering_vrfs": {
      "type": "object",
      "description": "On mlag leafs, an SVI interface is defined per vrf, to establish iBGP peering (required when there are MLAG leafs in topology).\nThe SVI id will be derived from the base vlan defined: mlag_ibgp_peering_vrfs.base_vlan + (vrf_id or vrf_vni) - 1.\nDepending on the values of vrf_id / vrf_vni it may be required to adjust the base_vlan to avoid overlaps or invalid vlan ids.\nThe SVI ip address derived from mlag_l3_peer_ipv4_pool is re-used across all iBGP peerings.\n",
      "properties": {
        "base_vlan": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4093,
          "default": 3000,
          "title": "Base VLAN"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "MLAG Ibgp Peering VRFs"
    },
    "name_servers": {
      "type": "array",
      "description": "List of DNS servers. The VRF is set to < mgmt_interface_vrf >.",
      "items": {
        "type": "string",
        "description": "IPv4 address"
      },
      "title": "Name Servers"
    },
    "network_ports": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "switches": {
            "type": "array",
            "description": "Regex matching the full hostname of one or more switches.\nThe regular expression must match the full hostname.\n",
            "items": {
              "type": "string"
            },
            "title": "Switches"
          },
          "switch_ports": {
            "type": "array",
            "description": "List of ranges using AVD range_expand syntax.\nFor example:\n\nswitch_ports:\n  - Ethernet1\n  - Ethernet2-48\n\nAll switch_ports ranges are expanded into individual port configurations.\n\nFor more details and examples of the `range_expand` syntax, see the [`arista.avd.range_expand` documentation](../../../docs/plugins/Filter_plugins/range_expand.md).\n",
            "items": {
              "type": "string"
            },
            "title": "Switch Ports"
          },
          "description": {
            "type": "string",
            "description": "Description to be used on all ports.",
            "title": "Description"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Network Ports"
    },
    "network_services_keys": {
      "type": "array",
      "description": "Network Services can be grouped by using separate keys.\nThe keys can be customized to provide a better better organization or grouping of your data.\n`network_services_keys` should be defined in the top level group_vars for the fabric.\nThe default values will be overridden if defining this key, so it is recommended to copy the defaults and modify them.\n",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "name"
        ]
      },
      "default": [
        {
          "name": "tenants"
        }
      ],
      "title": "Network Services Keys"
    },
    "node_type_keys": {
      "type": "array",
      "description": "Define Node Type Keys, to specify the properties of each node type in the fabric.\nThis allows for complete customization of the fabric layout and functionality.\n`node_type_keys` should be defined in top level group_var for the fabric.\nThe default values will be overridden if defining this key, so it is recommended to copy the defaults and modify them.\n",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "type": {
            "type": "string",
            "description": "Type value matching this node_type_key.",
            "title": "Type"
          },
          "connected_endpoints": {
            "type": "boolean",
            "default": false,
            "description": "Are endpoints connected to this node type.",
            "title": "Connected Endpoints"
          },
          "default_evpn_role": {
            "type": "string",
            "enum": [
              "none",
              "client",
              "server"
            ],
            "default": "none",
            "description": "Default evpn_role. Can be overridden in topology vars.",
            "title": "Default EVPN Role"
          },
          "default_ptp_priority1": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 127,
            "description": "Default PTP priority 1",
            "title": "Default PTP Priority1"
          },
          "default_underlay_routing_protocol": {
            "type": "string",
            "default": "ebgp",
            "enum": [
              "ebgp",
              "ibgp",
              "ospf",
              "ospf-ldp",
              "isis",
              "isis-sr",
              "isis-ldp",
              "isis-sr-ldp",
              "none"
            ],
            "description": "Set the default underlay routing_protocol.\nCan be overridden by setting \"underlay_routing_protocol\" host/group_vars.\n",
            "title": "Default Underlay Routing Protocol"
          },
          "default_overlay_routing_protocol": {
            "type": "string",
            "default": "ebgp",
            "enum": [
              "ebgp",
              "ibgp",
              "her",
              "cvx",
              "none"
            ],
            "description": "Set the default overlay routing_protocol.\nCan be overridden by setting \"overlay_routing_protocol\" host/group_vars.\n",
            "title": "Default Overlay Routing Protocol"
          },
          "default_mpls_overlay_role": {
            "type": "string",
            "enum": [
              "client",
              "server",
              "none"
            ],
            "description": "Set the default mpls overlay role.\nActing role in overlay control plane.\n",
            "title": "Default MPLS Overlay Role"
          },
          "default_overlay_address_families": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "evpn",
                "vpn-ipv4",
                "vpn-ipv6"
              ]
            },
            "description": "Set the default overlay address families.\n",
            "title": "Default Overlay Address Families"
          },
          "default_evpn_encapsulation": {
            "type": "string",
            "enum": [
              "mpls",
              "vxlan"
            ],
            "description": "Set the default evpn encapsulation.\n",
            "title": "Default EVPN Encapsulation"
          },
          "default_wan_role": {
            "type": "string",
            "enum": [
              "client",
              "server"
            ],
            "description": "PREVIEW: This key is currently not supported\nSet the default WAN role.\n\nThis is used both for AutoVPN and Pathfinder designs.\nThat means if `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.\n`server` indicates that the router is a route-reflector.\n\nOnly supported if `overlay_routing_protocol` is set to `ibgp`.\n",
            "title": "Default Wan Role"
          },
          "default_cv_pathfinder_role": {
            "type": "string",
            "enum": [
              "edge",
              "transit region",
              "pathfinder"
            ],
            "description": "PREVIEW: This key is currently not supported\nSet the default CV Pathfinder role.\n\nThis key is used for Pathfinder designs only when the `wan_mode` root\nkey is set to `cv-pathfinder`.\n\n`pathfinder` is only a valid if `wan_role` is `server`.\n`edge` and `transit` are only valid if `wan_role` is `client`.\n",
            "title": "Default Cv Pathfinder Role"
          },
          "mlag_support": {
            "type": "boolean",
            "default": false,
            "description": "Can this node type support mlag.",
            "title": "MLAG Support"
          },
          "network_services": {
            "description": "Will network services be deployed on this node type.",
            "type": "object",
            "properties": {
              "l1": {
                "type": "boolean",
                "default": false,
                "description": "??",
                "title": "L1"
              },
              "l2": {
                "type": "boolean",
                "default": false,
                "description": "Vlans",
                "title": "L2"
              },
              "l3": {
                "type": "boolean",
                "default": false,
                "description": "VRFs, SVIs (if l2 is true).\nOnly supported with underlay_router.\n",
                "title": "L3"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Network Services"
          },
          "underlay_router": {
            "type": "boolean",
            "default": true,
            "description": "Is this node type a L3 device.",
            "title": "Underlay Router"
          },
          "uplink_type": {
            "type": "string",
            "enum": [
              "p2p",
              "port-channel"
            ],
            "default": "p2p",
            "description": "`uplink_type` must be \"p2p\" if `vtep` or `underlay_router` is true.",
            "title": "Uplink Type"
          },
          "vtep": {
            "type": "boolean",
            "default": false,
            "description": "Is this switch an EVPN VTEP.",
            "title": "Vtep"
          },
          "mpls_lsr": {
            "type": "boolean",
            "default": false,
            "description": "Is this switch an MPLS LSR.",
            "title": "MPLS Lsr"
          },
          "ip_addressing": {
            "type": "object",
            "description": "Override ip_addressing templates.",
            "properties": {
              "python_module": {
                "type": "string",
                "description": "Custom Python Module to import for IP addressing.",
                "title": "Python Module"
              },
              "python_class_name": {
                "type": "string",
                "description": "Name of Custom Python Class to import for IP addressing.",
                "title": "Python Class Name"
              },
              "router_id": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Router ID"
              },
              "router_id_ipv6": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Router ID IPv6"
              },
              "mlag_ip_primary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG IP Primary"
              },
              "mlag_ip_secondary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG IP Secondary"
              },
              "mlag_l3_ip_primary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG L3 IP Primary"
              },
              "mlag_l3_ip_secondary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG L3 IP Secondary"
              },
              "mlag_ibgp_peering_ip_primary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG Ibgp Peering IP Primary"
              },
              "mlag_ibgp_peering_ip_secondary": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG Ibgp Peering IP Secondary"
              },
              "p2p_uplinks_ip": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "P2P Uplinks IP"
              },
              "p2p_uplinks_peer_ip": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "P2P Uplinks Peer IP"
              },
              "vtep_ip_mlag": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Vtep IP MLAG"
              },
              "vtep_ip": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Vtep IP"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "IP Addressing"
          },
          "interface_descriptions": {
            "type": "object",
            "description": "Override interface_descriptions templates\nIf description templates use Jinja2, they have to strip whitespaces using {%- -%} on any code blocks.\n",
            "properties": {
              "python_module": {
                "type": "string",
                "description": "Custom Python Module to import for interface descriptions.",
                "title": "Python Module"
              },
              "python_class_name": {
                "type": "string",
                "description": "Name of Custom Python Class to import for interface descriptions.",
                "title": "Python Class Name"
              },
              "underlay_ethernet_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Underlay Ethernet Interfaces"
              },
              "underlay_port_channel_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Underlay Port Channel Interfaces"
              },
              "mlag_ethernet_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG Ethernet Interfaces"
              },
              "mlag_port_channel_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "MLAG Port Channel Interfaces"
              },
              "connected_endpoints_ethernet_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Connected Endpoints Ethernet Interfaces"
              },
              "connected_endpoints_port_channel_interfaces": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Connected Endpoints Port Channel Interfaces"
              },
              "overlay_loopback_interface": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Overlay Loopback Interface"
              },
              "vtep_loopback_interface": {
                "type": "string",
                "description": "Path to Custom J2 template.",
                "title": "Vtep Loopback Interface"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Interface Descriptions"
          },
          "cv_tags_topology_type": {
            "description": "PREVIEW: This key is currently not supported\nType that CloudVision should use when generating the Topology.",
            "type": "string",
            "enum": [
              "leaf",
              "spine",
              "core",
              "edge"
            ],
            "title": "Cv Tags Topology Type"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "key"
        ]
      },
      "title": "Node Type Keys"
    },
    "ntp_settings": {
      "type": "object",
      "description": "NTP settings",
      "properties": {
        "server_vrf": {
          "type": "string",
          "description": "EOS only supports NTP servers in one VRF, so this VRF is used for all NTP servers and one local-interface.\n- `use_mgmt_interface_vrf` will configure the NTP server(s) under the VRF set with `mgmt_interface_vrf` and set the `mgmt_interface` as NTP local-interface.\n  An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.\n- `use_inband_mgmt_vrf` will configure the NTP server(s) under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as NTP local-interface.\n  An error will be raised if inband management is not configured for the device.\n- Any other string will be used directly as the VRF name but local interface must be set with `custom_structured_configuration_ntp` if needed.\nIf not set, the VRF is automatically picked up from the global setting `default_mgmt_method`.",
          "title": "Server VRF"
        },
        "servers": {
          "type": "array",
          "description": "The first server is always set as \"preferred\".",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "Name"
              },
              "burst": {
                "type": "boolean",
                "title": "Burst"
              },
              "iburst": {
                "type": "boolean",
                "title": "Iburst"
              },
              "key": {
                "type": "integer",
                "title": "Key"
              },
              "maxpoll": {
                "type": "integer",
                "title": "Maxpoll"
              },
              "minpoll": {
                "type": "integer",
                "title": "Minpoll"
              },
              "version": {
                "type": "integer",
                "title": "Version"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Servers"
        },
        "authenticate": {
          "type": "boolean",
          "title": "Authenticate"
        },
        "authenticate_servers_only": {
          "type": "boolean",
          "title": "Authenticate Servers Only"
        },
        "authentication_keys": {
          "type": "array",
          "title": "Authentication Keys"
        },
        "trusted_keys": {
          "type": "string",
          "title": "Trusted Keys"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "NTP Settings"
    },
    "only_local_vlan_trunk_groups": {
      "type": "boolean",
      "description": "A vlan can have many trunk_groups assigned.\nTo avoid unneeded configuration changes on all leaf switches when a new trunk group is added,\nthis feature will only configure the vlan trunk groups matched with local connected_endpoints.\nSee \"Details on only_local_vlan_trunk_groups\" below.\nRequires \"enable_trunk_groups: true\".\n",
      "default": false,
      "title": "Only Local VLAN Trunk Groups"
    },
    "overlay_cvx_servers": {
      "description": "List of CVX vxlan overlay controllers.\nRequired if overlay_routing_protocol == CVX.\nCVX servers (VMs) are peering using their management interface, so mgmt_ip must be set for all CVX servers.\n",
      "type": "array",
      "items": {
        "type": "string",
        "description": "'inventory_hostname' of CVX server\n"
      },
      "title": "Overlay CVX Servers"
    },
    "overlay_her_flood_list_per_vni": {
      "type": "boolean",
      "description": "When using Head-End Replication, configure flood-lists per VNI.\nBy default HER will be configured with a common flood-list containing all VTEPs.\nThis behavior can be changed to per-VNI flood-lists by setting `overlay_her_flood_list_per_vni: true`.\nThis will make `eos_designs` consider configured VLANs per VTEP, and only include the relevant VTEPs to each VNI's flood-list.\n",
      "default": false,
      "title": "Overlay Her Flood List Per Vni"
    },
    "overlay_her_flood_list_scope": {
      "type": "string",
      "description": "When using Head-End Replication, set the scope of flood-lists to Fabric or DC.\nBy default all VTEPs in the Fabric (part of the inventory group referenced by \"fabric_name\") are added to the flood-lists.\nThis can be changed to all VTEPs in the DC (sharing the same \"dc_name\" value).\nThis is useful if Border Leaf switches are dividing the VXLAN overlay into separate domains.\n",
      "enum": [
        "fabric",
        "dc"
      ],
      "default": "fabric",
      "title": "Overlay Her Flood List Scope"
    },
    "overlay_loopback_description": {
      "description": "Customize the description on overlay interface Loopback0.",
      "type": "string",
      "title": "Overlay Loopback Description"
    },
    "overlay_mlag_rfc5549": {
      "description": "IPv6 Unnumbered for MLAG iBGP connections.\nRequires \"underlay_rfc5549: true\".\n",
      "type": "boolean",
      "default": false,
      "title": "Overlay MLAG Rfc5549"
    },
    "overlay_rd_type": {
      "type": "object",
      "description": "Configuration options for the Administrator subfield (first part of RD) and the Assigned Number subfield (second part of RD).\n\nBy default Route Distinguishers (RD) are set to:\n- `<overlay_loopback>:<mac_vrf_id_base + vlan_id or mac_vrf_vni_base + vlan_id>` for VLANs and VLAN-Aware Bundles with L2 vlans.\n- `<overlay_loopback>:<vlan_aware_bundle_number_base + vrf_id>` for VLAN-Aware Bundles with SVIs.\n- `<overlay_loopback>:<vlan_aware_bundle_number_base + id>` for VLAN-Aware Bundles defined under 'evpn_vlan_bundles'.\n- `<overlay_loopback>:<vrf_id>` for VRFs.\n\nNote:\nRD is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.\nWhen using loopback or 32-bit ASN/number the assigned number can only be a 16-bit number. This may be a problem with large VNIs.\nFor 16-bit ASN/number the assigned number can be a 32-bit number.\n",
      "properties": {
        "admin_subfield": {
          "type": "string",
          "description": "The method for deriving RD Administrator subfield (first part of RD):\n- 'overlay_loopback_ip' means the IP address of Loopback0.\n- 'vtep_loopback' means the IP address of the VTEP loopback interface.\n- 'bgp_as' means the AS number of the device.\n- 'switch_id' means the 'id' value of the device.\n- Any <IPv4 Address> without mask.\n- Integer between <0-65535>.\n- Integer between <0-4294967295>.\n",
          "default": "overlay_loopback_ip",
          "title": "Admin Subfield"
        },
        "admin_subfield_offset": {
          "type": "string",
          "description": "Offset can only be used if admin_subfield is an integer between <0-4294967295> or 'switch_id'.\nTotal value of admin_subfield + admin_subfield_offset must be <= 4294967295.\n",
          "title": "Admin Subfield Offset"
        },
        "vrf_admin_subfield": {
          "type": "string",
          "description": "The method for deriving RD Administrator subfield (first part of RD) for VRF services:\n- 'overlay_loopback_ip' means the IP address of Loopback0.\n- 'vtep_loopback' means the IP address of the VTEP loopback interface.\n- 'bgp_as' means the AS number of the device.\n- 'switch_id' means the 'id' value of the device.\n- Any <IPv4 Address> without mask.\n- Integer between <0-65535>.\n- Integer between <0-4294967295>.\n\n'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the 'admin_subfield' value will be used.\n",
          "title": "VRF Admin Subfield"
        },
        "vrf_admin_subfield_offset": {
          "type": "string",
          "description": "Offset can only be used if 'vrf_admin_subfield' is an integer between <0-4294967295> or 'switch_id'.\nTotal value of 'vrf_admin_subfield' + 'vrf_admin_subfield_offset' must be <= 4294967295.\n",
          "title": "VRF Admin Subfield Offset"
        },
        "vlan_assigned_number_subfield": {
          "type": "string",
          "enum": [
            "mac_vrf_id",
            "mac_vrf_vni",
            "vlan_id"
          ],
          "default": "mac_vrf_id",
          "description": "The method for deriving RD Assigned Number subfield for VLAN services (second part of RD):\n- 'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.\n- 'mac_vrf_vni' means `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.\n- 'vlan_id' will only use the 'vlan_id' and ignores all base values.\n\nThese methods can be overridden per VLAN if either 'rd_override', 'rt_override' or 'vni_override' is set (preferred in this order).\n",
          "title": "VLAN Assigned Number Subfield"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Overlay Rd Type"
    },
    "overlay_routing_protocol": {
      "description": "- The following overlay routing protocols are supported:\n  - eBGP: Configures fabric with eBGP, default for l3ls-evpn design.\n  - iBGP: Configured fabric with iBGP, only supported with OSPF or ISIS variants in underlay, default for mpls design.\n  - CVX: Configures fabric to leverage CloudVision eXchange as the overlay controller.\n  - HER: Configures fabric with Head-End Replication, configures static VXLAN flood-lists instead of using a dynamic overlay protocol.\n  - none: No overlay configuration will be generated, default for l2ls design.\n",
      "type": "string",
      "enum": [
        "ebgp",
        "ibgp",
        "cvx",
        "her",
        "none"
      ],
      "default": "ebgp",
      "title": "Overlay Routing Protocol"
    },
    "overlay_routing_protocol_address_family": {
      "type": "string",
      "description": "When set to `ipv6`, enable overlay EVPN peering with IPv6 addresses.\nThis feature depends on underlay_ipv6 variable. As of today, only RFC5549 is capable to transport IPv6 in the underlay.\n",
      "enum": [
        "ipv4",
        "ipv6"
      ],
      "default": "ipv4",
      "title": "Overlay Routing Protocol Address Family"
    },
    "overlay_rt_type": {
      "type": "object",
      "description": "Configuration options for the Administrator subfield (first part of RT) and the Assigned Number subfield (second part of RT).\n\nBy default Route Targets (RT) are set to:\n- `<(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id>:<(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id>` for VLANs and VLAN-Aware Bundles with L2 vlans.\n- `<vlan_aware_bundle_number_base + vrf_id>:<vlan_aware_bundle_number_base + vrf_id>` for VLAN-Aware Bundles with SVIs.\n- `<vlan_aware_bundle_number_base + id>:<vlan_aware_bundle_number_base + id>` for VLAN-Aware Bundles defined under 'evpn_vlan_bundles'.\n- `<vrf_id>:<vrf_id>` for VRFs.\n\nNotes:\nRT is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.\nWhen using 32-bit ASN/number the VNI can only be a 16-bit number. Alternatively use vlan_id/vrf_id as assigned number.\nFor 16-bit ASN/number the assigned number can be a 32-bit number.\n",
      "properties": {
        "admin_subfield": {
          "type": "string",
          "description": "The method for deriving RT Administrator subfield (first part of RT):\n- 'vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id` for bundles defined under 'evpn_vlan_bundles'.\n- 'vrf_vni' means `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id` for VLANs, `(vrf_vni or vrf_id)` for VRFs and `id` for bundles defined under 'evpn_vlan_bundles'.\n- 'id' means `vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id` for bundles defined under 'evpn_vlan_bundles'.\n- 'bgp_as' means the AS number of the device.\n- Integer between <0-65535>.\n- Integer between <0-4294967295>.\n\nThe 'vrf_id' and 'vrf_vni' methods can be overridden per VLAN if either 'rt_override' or 'vni_override' is set (preferred in this order).\nThe 'vrf_id', 'vrf_vni' and 'id' methods can be overridden per bundle defined under `evpn_vlan_bundles` using 'rt_override'.\n",
          "default": "vrf_id",
          "title": "Admin Subfield"
        },
        "vrf_admin_subfield": {
          "type": "string",
          "description": "The method for deriving RT Administrator subfield (first part of RT) for VRF services:\n- 'id' means `(vrf_id or vrf_vni)`.\n- 'vrf_id' means `(vrf_id or vrf_vni)`.\n- 'vrf_vni' means `(vrf_vni or vrf_id)`.\n- 'bgp_as' means the AS number of the device.\n- Integer between <0-65535>.\n- Integer between <0-4294967295>.\n\n'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the 'admin_subfield' value will be used.\n",
          "default": "vrf_id",
          "title": "VRF Admin Subfield"
        },
        "vlan_assigned_number_subfield": {
          "type": "string",
          "enum": [
            "mac_vrf_id",
            "mac_vrf_vni",
            "vlan_id"
          ],
          "default": "mac_vrf_id",
          "description": "The method for deriving RT Assigned Number subfield for VLAN services (second part of RT):\n- 'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.\n- 'mac_vrf_vni' means `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.\n- 'vlan_id' will only use the 'vlan_id' and ignores all base values.\n\nThese methods can be overridden per VLAN if either 'rt_override' or 'vni_override' is set (preferred in this order).\n",
          "title": "VLAN Assigned Number Subfield"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Overlay Rt Type"
    },
    "p2p_uplinks_mtu": {
      "description": "Point to Point Links MTU.",
      "type": "integer",
      "minimum": 68,
      "maximum": 65535,
      "default": 9214,
      "title": "P2P Uplinks MTU"
    },
    "p2p_uplinks_qos_profile": {
      "description": "QOS Profile assigned on all infrastructure links.",
      "type": "string",
      "title": "P2P Uplinks QOS Profile"
    },
    "platform_settings": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Platforms"
          },
          "trident_forwarding_table_partition": {
            "type": "string",
            "description": "Only applied when evpn_multicast is true.",
            "title": "Trident Forwarding Table Partition"
          },
          "reload_delay": {
            "type": "object",
            "properties": {
              "mlag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 86400,
                "description": "In seconds.",
                "title": "MLAG"
              },
              "non_mlag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 86400,
                "description": "In seconds.",
                "title": "Non MLAG"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Reload Delay"
          },
          "tcam_profile": {
            "type": "string",
            "title": "TCAM Profile"
          },
          "lag_hardware_only": {
            "type": "boolean",
            "title": "LAG Hardware Only"
          },
          "default_interface_mtu": {
            "type": "integer",
            "description": "Default interface MTU configured on EOS under \"interface defaults\".\nTakes precedence over the root key \"default_interface_mtu\".\n",
            "minimum": 68,
            "maximum": 65535,
            "title": "Default Interface MTU"
          },
          "feature_support": {
            "type": "object",
            "properties": {
              "queue_monitor_length_notify": {
                "type": "boolean",
                "default": true,
                "title": "Queue Monitor Length Notify"
              },
              "interface_storm_control": {
                "type": "boolean",
                "default": true,
                "title": "Interface Storm Control"
              },
              "poe": {
                "type": "boolean",
                "default": false,
                "title": "PoE"
              },
              "per_interface_mtu": {
                "type": "boolean",
                "default": true,
                "description": "Support for configuration of per interface MTU for p2p links, MLAG SVIs and Network Services.\nEffectively this means that all settings regarding interface MTU will be ignored if this is false.\nPlatforms without support for per interface MTU can use a single default interface MTU setting. Set this via \"default_interface_mtu\"\n",
                "title": "Per Interface MTU"
              },
              "bgp_update_wait_install": {
                "type": "boolean",
                "default": true,
                "description": "Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP convergence state is reached.\nCan be overridden by setting \"bgp_update_wait_install\" host/group_vars.\n",
                "title": "BGP Update Wait Install"
              },
              "bgp_update_wait_for_convergence": {
                "type": "boolean",
                "default": true,
                "description": "Do not advertise reachability to a prefix until that prefix has been installed in hardware.\nThis will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix that may not yet be installed into the forwarding plane.\nCan be overridden by setting \"bgp_update_wait_for_convergence\" host/group_vars.\n",
                "title": "BGP Update Wait For Convergence"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Feature Support"
          },
          "management_interface": {
            "type": "string",
            "default": "Management1",
            "title": "Management Interface"
          },
          "raw_eos_cli": {
            "type": "string",
            "description": "EOS CLI rendered directly on the root level of the final EOS configuration.",
            "title": "Raw EOS CLI"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "default": [
        {
          "platforms": [
            "default"
          ],
          "feature_support": {
            "queue_monitor_length_notify": false
          },
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          }
        },
        {
          "platforms": [
            "7050X3"
          ],
          "feature_support": {
            "queue_monitor_length_notify": false
          },
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          },
          "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072"
        },
        {
          "platforms": [
            "720XP"
          ],
          "feature_support": {
            "poe": true,
            "queue_monitor_length_notify": false
          },
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          },
          "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072"
        },
        {
          "platforms": [
            "750",
            "755",
            "758",
            "720DP",
            "722XP",
            "710P"
          ],
          "feature_support": {
            "poe": true,
            "queue_monitor_length_notify": false
          },
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          }
        },
        {
          "platforms": [
            "7280R",
            "7280R2",
            "7020R"
          ],
          "lag_hardware_only": true,
          "reload_delay": {
            "mlag": 900,
            "non_mlag": 1020
          },
          "tcam_profile": "vxlan-routing"
        },
        {
          "platforms": [
            "7280R3"
          ],
          "reload_delay": {
            "mlag": 900,
            "non_mlag": 1020
          }
        },
        {
          "platforms": [
            "7500R",
            "7500R2"
          ],
          "lag_hardware_only": true,
          "management_interface": "Management0",
          "reload_delay": {
            "mlag": 900,
            "non_mlag": 1020
          },
          "tcam_profile": "vxlan-routing"
        },
        {
          "platforms": [
            "7500R3",
            "7800R3"
          ],
          "management_interface": "Management0",
          "reload_delay": {
            "mlag": 900,
            "non_mlag": 1020
          }
        },
        {
          "platforms": [
            "7368X4"
          ],
          "management_interface": "Management0",
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          }
        },
        {
          "platforms": [
            "7300X3"
          ],
          "management_interface": "Management0",
          "reload_delay": {
            "mlag": 1200,
            "non_mlag": 1320
          },
          "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072"
        },
        {
          "platforms": [
            "VEOS",
            "VEOS-LAB",
            "vEOS",
            "vEOS-lab"
          ],
          "feature_support": {
            "bgp_update_wait_for_convergence": false,
            "bgp_update_wait_install": false,
            "interface_storm_control": false,
            "queue_monitor_length_notify": false
          },
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          }
        },
        {
          "platforms": [
            "CEOS",
            "cEOS",
            "ceos",
            "cEOSLab"
          ],
          "feature_support": {
            "bgp_update_wait_for_convergence": false,
            "bgp_update_wait_install": false,
            "interface_storm_control": false,
            "queue_monitor_length_notify": false
          },
          "management_interface": "Management0",
          "reload_delay": {
            "mlag": 300,
            "non_mlag": 330
          }
        }
      ],
      "title": "Platform Settings"
    },
    "platform_speed_groups": {
      "type": "array",
      "description": "Set Hardware Speed Groups per Platform.",
      "items": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform"
          },
          "speeds": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "speed": {
                  "type": "string",
                  "title": "Speed"
                },
                "speed_groups": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Speed Groups"
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              },
              "required": [
                "speed"
              ]
            },
            "title": "Speeds"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "platform"
        ]
      },
      "title": "Platform Speed Groups"
    },
    "pod_name": {
      "description": "POD Name is used in:\n- Fabric Documentation (Optional, falls back to dc_name and then to fabric_name)\n- SNMP Location: `snmp_settings.location` (Optional)\n- VRF Loopbacks: `vtep_diagnostic.loopback_ip_pools.pod` (Required)\n\nRecommended to be common between Spines and Leafs within a POD (One l3ls topology).\n",
      "type": "string",
      "title": "Pod Name"
    },
    "port_profiles": {
      "type": "array",
      "description": "Optional profiles to share common settings for connected_endpoints and/or network_ports.\nKeys are the same used under endpoints adapters. Keys defined under endpoints adapters take precedence.\n",
      "items": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string",
            "description": "Port profile name.",
            "title": "Profile"
          },
          "parent_profile": {
            "type": "string",
            "description": "Parent profile is optional.\nPort_profiles can refer to another port_profile to inherit settings in up to two levels (adapter->profile->parent_profile).\n",
            "title": "Parent Profile"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "profile"
        ]
      },
      "title": "Port Profiles"
    },
    "ptp": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled"
        },
        "profile": {
          "type": "string",
          "enum": [
            "aes67",
            "smpte2059-2",
            "aes67-r16-2016"
          ],
          "default": "aes67-r16-2016",
          "title": "Profile"
        },
        "domain": {
          "type": "integer",
          "title": "Domain"
        },
        "auto_clock_identity": {
          "type": "boolean",
          "default": true,
          "title": "Auto Clock Identity"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "PTP"
    },
    "ptp_profiles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string",
            "description": "PTP profile.",
            "title": "Profile"
          },
          "announce": {
            "type": "object",
            "description": "PTP announce interval.",
            "properties": {
              "interval": {
                "type": "integer",
                "minimum": -7,
                "maximum": 4,
                "title": "Interval"
              },
              "timeout": {
                "type": "integer",
                "minimum": 2,
                "maximum": 255,
                "title": "Timeout"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Announce"
          },
          "delay_req": {
            "type": "integer",
            "minimum": -7,
            "maximum": 8,
            "title": "Delay Req"
          },
          "sync_message": {
            "type": "object",
            "description": "PTP sync message interval.",
            "properties": {
              "interval": {
                "type": "integer",
                "minimum": -7,
                "maximum": 3,
                "title": "Interval"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "title": "Sync Message"
          },
          "transport": {
            "type": "string",
            "enum": [
              "ipv4"
            ],
            "title": "Transport"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "default": [
        {
          "announce": {
            "interval": 0,
            "timeout": 3
          },
          "delay_req": -3,
          "profile": "aes67-r16-2016",
          "sync_message": {
            "interval": -3
          },
          "transport": "ipv4"
        },
        {
          "announce": {
            "interval": -2,
            "timeout": 3
          },
          "delay_req": -4,
          "profile": "smpte2059-2",
          "sync_message": {
            "interval": -4
          },
          "transport": "ipv4"
        },
        {
          "announce": {
            "interval": 2,
            "timeout": 3
          },
          "delay_req": 0,
          "profile": "aes67",
          "sync_message": {
            "interval": 0
          },
          "transport": "ipv4"
        }
      ],
      "title": "PTP Profiles"
    },
    "queue_monitor_length": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled"
        },
        "notifying": {
          "type": "boolean",
          "description": "If True, `eos_designs` will configure `queue-monitor length notifying` according to the\n`platform_settings.[].feature_support.queue_monitor_length_notify` setting.\n",
          "title": "Notifying"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Queue Monitor Length"
    },
    "redundancy": {
      "type": "object",
      "description": "Redundancy for chassis platforms with dual supervisors | Optional.",
      "properties": {
        "protocol": {
          "type": "string",
          "enum": [
            "sso",
            "rpr"
          ],
          "title": "Protocol"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Redundancy"
    },
    "serial_number": {
      "description": "Serial Number of the device.\nUsed for documentation purpose in the fabric documentation as can also be used by the 'eos_config_deploy_cvp' role.\n\"serial_number\" can also be set directly under node type settings.\nIf both are set, the value under node type settings takes precedence.\n",
      "type": "string",
      "title": "Serial Number"
    },
    "shutdown_interfaces_towards_undeployed_peers": {
      "type": "boolean",
      "default": false,
      "description": "- It is possible to provision configurations for a complete topology but flag devices as undeployed using the host level variable `is_deployed: false`.\n\n```yaml\n# Use at the host level\nis_deployed: < true or false or default -> true >\n```\n\n- By default, this will have no impact within the `eos_designs` role. Configs will still be generated by the `eos_cli_config_gen` role and will still be pushed by the `eos_config_deploy_eapi` directly to devices if used.\n- However, if the `eos_config_deploy_cvp` role is used to push configurations, CloudVision will ignore the devices flagged  as `is_deployed: false` and not attempt to configure them.\n- If the device is not present in the network due to CloudVision not configuring the device, `eos_validate_state` role will fail tests on peers of the undeployed device trying to verify that interfaces are up.\n- To overcome this and shutdown interfaces towards undeployed peers, the variable `shutdown_interfaces_towards_undeployed_peers` can be used, satisfying the `eos_validate_state` role interface tests.\n- Again, this is only an issue if `eos_config_deploy_cvp` is used and the devices are not present in the network.\n",
      "title": "Shutdown Interfaces Towards Undeployed Peers"
    },
    "snmp_settings": {
      "type": "object",
      "description": "SNMP settings\nFor SNMP local-interfaces see \"source_interfaces.snmp\"\nConfiguration of remote SNMP engine IDs are currently only possible using `structured_config`.",
      "properties": {
        "contact": {
          "type": "string",
          "description": "SNMP contact.",
          "title": "Contact"
        },
        "location": {
          "type": "boolean",
          "default": false,
          "description": "Set SNMP location. Formatted as \"<fabric_name> <dc_name> <pod_name> <switch_rack> <inventory_hostname>\".",
          "title": "Location"
        },
        "vrfs": {
          "type": "array",
          "description": "Enable/disable SNMP for one or more VRFs.\nCan be used in combination with \"enable_mgmt_interface_vrf\" and \"enable_inband_mgmt_vrf\".",
          "title": "VRFs"
        },
        "enable_mgmt_interface_vrf": {
          "type": "boolean",
          "description": "Enable/disable SNMP for the VRF set with \"mgmt_interface_vrf\".\nIgnored if 'mgmt_ip' or 'ipv6_mgmt_ip' are not configured for the device.\nCan be used in combination with \"vrfs\" and \"enable_inband_mgmt_vrf\".",
          "title": "Enable Management Interface VRF"
        },
        "enable_inband_mgmt_vrf": {
          "type": "boolean",
          "description": "Enable/disable SNMP for the VRF set with \"inband_mgmt_vrf\".\nIgnored if inband management is not configured for the device.\nCan be used in combination with \"vrfs\" and \"enable_mgmt_interface_vrf\".",
          "title": "Enable Inband Management VRF"
        },
        "compute_local_engineid": {
          "type": "boolean",
          "default": false,
          "description": "Generate a local engineId for SNMP using the 'compute_local_engineid_source' method.\n",
          "title": "Compute Local Engineid"
        },
        "compute_local_engineid_source": {
          "type": "string",
          "default": "hostname_and_ip",
          "description": "`compute_local_engineid_source` supports:\n- `hostname_and_ip` generate a local engineId for SNMP by hashing via SHA1\n  the string generated via the concatenation of the hostname plus the management IP.\n  {{ inventory_hostname }} + {{ switch.mgmt_ip }}.\n- `system_mac` generate the switch default engine id for AVD usage.\n  To use this, `system_mac_address` MUST be set for the device.\n  The formula is f5717f + system_mac_address + 00.\n",
          "enum": [
            "hostname_and_ip",
            "system_mac"
          ],
          "title": "Compute Local Engineid Source"
        },
        "compute_v3_user_localized_key": {
          "type": "boolean",
          "default": false,
          "description": "Requires compute_local_engineid to be `true`.\nIf enabled, the SNMPv3 passphrases for auth and priv are transformed using RFC 2574, matching the value they would take in EOS CLI.\nThe algorithm requires a local engineId, which is unknown to AVD, hence the necessity to generate one beforehand.\n",
          "title": "Compute V3 User Localized Key"
        },
        "users": {
          "type": "array",
          "description": "Configuration of local SNMP users.\nConfiguration of remote SNMP users are currently only possible using `structured_config`.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Username",
                "title": "Name"
              },
              "group": {
                "type": "string",
                "description": "Group name",
                "title": "Group"
              },
              "version": {
                "type": "string",
                "enum": [
                  "v1",
                  "v2c",
                  "v3"
                ],
                "title": "Version"
              },
              "auth": {
                "type": "string",
                "enum": [
                  "md5",
                  "sha",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "title": "Auth"
              },
              "auth_passphrase": {
                "type": "string",
                "description": "Cleartext passphrase so the recommendation is to use vault. Requires 'auth' to be set.",
                "title": "Auth Passphrase"
              },
              "priv": {
                "type": "string",
                "enum": [
                  "des",
                  "aes",
                  "aes192",
                  "aes256"
                ],
                "title": "Priv"
              },
              "priv_passphrase": {
                "type": "string",
                "description": "Cleartext passphrase so the recommendation is to use vault. Requires 'priv' to be set.",
                "title": "Priv Passphrase"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Users"
        },
        "hosts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "title": "Host"
              },
              "vrf": {
                "type": "string",
                "description": "VRF Name.\nCan be used in combination with \"use_mgmt_interface_vrf\" and \"use_inband_mgmt_vrf\" to configure the SNMP host under multiple VRFs.",
                "title": "VRF"
              },
              "use_mgmt_interface_vrf": {
                "type": "boolean",
                "description": "Configure the SNMP host under the VRF set with \"mgmt_interface_vrf\". Ignored if 'mgmt_ip' or 'ipv6_mgmt_ip' are not configured for the device, so if the host is only configured with this VRF, the host will not be configured at all. Can be used in combination with \"vrf\" and \"use_inband_mgmt_vrf\" to configure the SNMP host under multiple VRFs.",
                "title": "Use Management Interface VRF"
              },
              "use_inband_mgmt_vrf": {
                "type": "boolean",
                "description": "Configure the SNMP host under the VRF set with \"inband_mgmt_vrf\". Ignored if inband management is not configured for the device, so if the host is only configured with this VRF, the host will not be configured at all. Can be used in combination with \"vrf\" and \"use_mgmt_interface_vrf\" to configure the SNMP host under multiple VRFs.",
                "title": "Use Inband Management VRF"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Hosts"
        },
        "communities": {
          "type": "array",
          "title": "Communities"
        },
        "ipv4_acls": {
          "type": "array",
          "title": "IPv4 Acls"
        },
        "ipv6_acls": {
          "type": "array",
          "title": "IPv6 Acls"
        },
        "views": {
          "type": "array",
          "title": "Views"
        },
        "groups": {
          "type": "array",
          "title": "Groups"
        },
        "traps": {
          "type": "object",
          "title": "Traps"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Snmp Settings"
    },
    "source_interfaces": {
      "type": "object",
      "description": "Configure source-interfaces based on the management interfaces set for other `eos_designs` data models.\nBy default, no source-interfaces will be configured. They can still be configured manually using `eos_cli_config_gen` and custom structured configuration.\nEOS supports a single source-interface per VRF, so an error will be raised in case of conflicts.\nErrors will also be raised if an interface is not found for a device.",
      "properties": {
        "domain_lookup": {
          "type": "object",
          "description": "IP Domain Lookup source-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Domain Lookup source-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Domain Lookup source-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Domain Lookup"
        },
        "http_client": {
          "type": "object",
          "description": "IP HTTP Client source-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP HTTP Client source-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP HTTP Client source-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "HTTP Client"
        },
        "radius": {
          "type": "object",
          "description": "IP Radius source-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Radius source-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Radius source-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Radius"
        },
        "snmp": {
          "type": "object",
          "description": "SNMP local-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure a SNMP local-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure a SNMP local-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Snmp"
        },
        "ssh_client": {
          "type": "object",
          "description": "IP SSH Client source-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP SSH Client source-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP SSH Client source-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "SSH Client"
        },
        "tacacs": {
          "type": "object",
          "description": "IP Tacacs source-interfaces.",
          "properties": {
            "mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Tacacs source-interface with the interface set by `mgmt_interface` for the VRF set by `mgmt_interface_vrf`.\n`mgmt_interface` is typically the out-of-band Management interface, and can be set under the node settings, platform settings or as a group/host var.",
              "title": "Management Interface"
            },
            "inband_mgmt_interface": {
              "type": "boolean",
              "description": "Configure an IP Tacacs source-interface with the interface set by `inband_mgmt_interface` for the VRF set by `inband_mgmt_vrf`.\n`inband_mgmt_interface` is typically a loopback or SVI interface, and can be set under the node settings.",
              "title": "Inband Management Interface"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Tacacs"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Source Interfaces"
    },
    "svi_profiles": {
      "type": "array",
      "description": "Profiles to share common settings for SVIs under `<network_services_key>.[].vrfs.svis`.\nKeys are the same used under SVIs. Keys defined under SVIs take precedence.\nNote: structured configuration is not merged recursively and will be taken directly from the most specific level in the following order:\n1. svi.nodes[inventory_hostname].structured_config\n2. svi_profile.nodes[inventory_hostname].structured_config\n3. svi_parent_profile.nodes[inventory_hostname].structured_config\n4. svi.structured_config\n5. svi_profile.structured_config\n6. svi_parent_profile.structured_config\n",
      "items": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string",
            "description": "Profile name",
            "title": "Profile"
          },
          "parent_profile": {
            "type": "string",
            "description": "Parent SVI profile name to apply.\nsvi_profiles can refer to another svi_profile to inherit settings in up to two levels (svi -> svi_profile -> svi_parent_profile).\n",
            "title": "Parent Profile"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "profile"
        ]
      },
      "title": "SVI Profiles"
    },
    "system_mac_address": {
      "type": "string",
      "description": "Set to the same MAC address as available in \"show version\" on the device.\n\"system_mac_address\" can also be set under node type settings.\nIf both are set, the value under node type settings takes precedence.\n",
      "title": "System MAC Address"
    },
    "terminattr_disable_aaa": {
      "type": "boolean",
      "default": false,
      "title": "TerminAttr Disable AAA"
    },
    "terminattr_ingestexclude": {
      "type": "string",
      "default": "/Sysdb/cell/1/agent,/Sysdb/cell/2/agent",
      "title": "TerminAttr Ingestexclude"
    },
    "terminattr_ingestgrpcurl_port": {
      "type": "integer",
      "default": 9910,
      "description": "Port number used for Terminattr connection to an on-premise CloudVision cluster.\nThe port number is always 443 when using CloudVision as a Service, so this value is ignored.",
      "title": "TerminAttr Ingestgrpcurl Port"
    },
    "terminattr_smashexcludes": {
      "type": "string",
      "default": "ale,flexCounter,hardware,kni,pulse,strata",
      "title": "TerminAttr Smashexcludes"
    },
    "timezone": {
      "type": "string",
      "description": "Clock timezone like \"CET\" or \"US/Pacific\".",
      "title": "Timezone"
    },
    "trunk_groups": {
      "type": "object",
      "properties": {
        "mlag": {
          "type": "object",
          "description": "Trunk Group used for MLAG VLAN (Typically VLAN 4094).\n",
          "properties": {
            "name": {
              "type": "string",
              "default": "MLAG",
              "title": "Name"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "MLAG"
        },
        "mlag_l3": {
          "type": "object",
          "description": "Trunk Group used for MLAG L3 peering VLAN and for VRF L3 peering VLANs (Typically VLAN 4093).\n",
          "properties": {
            "name": {
              "type": "string",
              "default": "LEAF_PEER_L3",
              "title": "Name"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "MLAG L3"
        },
        "uplink": {
          "type": "object",
          "description": "Trunk Group used on L2 Leaf switches when \"enable_trunk_groups\" is set.\n",
          "properties": {
            "name": {
              "type": "string",
              "default": "UPLINK",
              "title": "Name"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Uplink"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Trunk Groups"
    },
    "type": {
      "type": "string",
      "description": "The `type:` variable needs to be defined for each device in the fabric.\nThis is leveraged to load the appropriate template to generate the configuration.\n",
      "title": "Type"
    },
    "underlay_filter_peer_as": {
      "type": "boolean",
      "description": "Configure route-map on eBGP sessions towards underlay peers, where prefixes with the peer's ASN in the AS Path are filtered away.\nThis is very useful in very large scale networks not using EVPN overlays, where convergence will be quicker by not having to return\nall updates received from Spine-1 to Spine-2 just for Spine-2 to throw them away because of AS Path loop detection.\nNote that this setting cannot be used while there are EVPN services present in the default VRF.\n",
      "default": false,
      "title": "Underlay Filter Peer As"
    },
    "underlay_filter_redistribute_connected": {
      "description": "Filter redistribution of connected into the underlay routing protocol.\nOnly applicable when overlay_routing_protocol != 'none' and underlay_routing_protocol == BGP.\nCreates a route-map and prefix-list assigned to redistribute connected permitting only loopbacks and inband management subnets.\n",
      "default": true,
      "type": "boolean",
      "title": "Underlay Filter Redistribute Connected"
    },
    "underlay_ipv6": {
      "description": "This feature allows IPv6 underlay routing protocol with RFC5549 addresses to be used along with IPv4 advertisements as VXLAN tunnel endpoints.\nRequires \"underlay_rfc5549: true\" and \"loopback_ipv6_pool\" under the node type settings.\n",
      "type": "boolean",
      "default": false,
      "title": "Underlay IPv6"
    },
    "underlay_isis_instance_name": {
      "description": "Default -> \"EVPN_UNDERLAY\" for l3ls, \"CORE\" for mpls.",
      "type": "string",
      "title": "Underlay ISIS Instance Name"
    },
    "underlay_multicast": {
      "type": "boolean",
      "description": "Enable Multicast in the underlay on all p2p uplink interfaces and mlag l3 peer interface.\nSpecifically PIM Sparse-Mode will be configured on all routed underlay interfaces.\nNo other configuration is added, so the underlay will only support Source-Specific Multicast (SSM).\nThe configuration is intended to be used as multicast underlay for EVPN OISM overlay.\n",
      "default": false,
      "title": "Underlay Multicast"
    },
    "underlay_multicast_anycast_rp": {
      "type": "object",
      "description": "If multiple nodes are configured under 'underlay_multicast_rps.[].nodes' for the same RP address, they will be configured\nwith one of the following methods:\n- Anycast RP using PIM (RFC4610).\n- Anycast RP using MSDP (RFC4611).\n\nNOTE: When using MSDP, all nodes across all MSDP enabled RPs will be added to a single MSDP mesh group named \"ANYCAST-RP\".\n",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "pim",
            "msdp"
          ],
          "default": "pim",
          "title": "Mode"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Underlay Multicast Anycast RP"
    },
    "underlay_multicast_rps": {
      "description": "List of PIM Sparse-Mode Rendevouz Points configured for underlay multicast on all devices.\nThe device(s) listed under 'nodes', will be configured as the Rendevouz point router(s).\nIf multiple nodes are configured under 'nodes' for the same RP address, they will be configured\naccording to the 'underlay_multicast_anycast_rp.mode' setting.\n\nRequires 'underlay_multicast: true'.\n",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "rp": {
            "type": "string",
            "description": "RP IPv4 address.",
            "title": "RP"
          },
          "nodes": {
            "type": "array",
            "description": "List of nodes where a Loopback interface with the RP address will be configured.\n",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Hostname.",
                  "title": "Name"
                },
                "loopback_number": {
                  "type": "integer",
                  "title": "Loopback Number"
                },
                "description": {
                  "type": "string",
                  "description": "Interface description.",
                  "default": "PIM RP",
                  "title": "Description"
                }
              },
              "required": [
                "loopback_number",
                "name"
              ],
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              }
            },
            "title": "Nodes"
          },
          "groups": {
            "type": "array",
            "description": "List of groups to associate with the RP address set in 'rp'.\nIf access_list_name is set, a standard access-list will be configured matching these groups.\nOtherwise the groups are configured directly on the RP command.\n",
            "items": {
              "type": "string",
              "description": "Multicast Group IPv4 prefix/mask."
            },
            "title": "Groups"
          },
          "access_list_name": {
            "type": "string",
            "description": "Name of standard Access-List.\n",
            "title": "Access List Name"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "rp"
        ]
      },
      "title": "Underlay Multicast RPs"
    },
    "underlay_ospf_area": {
      "type": "string",
      "format": "ipv4",
      "default": "0.0.0.0",
      "title": "Underlay OSPF Area"
    },
    "underlay_ospf_bfd_enable": {
      "type": "boolean",
      "default": false,
      "title": "Underlay OSPF BFD Enable"
    },
    "underlay_ospf_max_lsa": {
      "type": "integer",
      "default": 12000,
      "title": "Underlay OSPF Max LSA"
    },
    "underlay_ospf_process_id": {
      "type": "integer",
      "default": 100,
      "title": "Underlay OSPF Process ID"
    },
    "underlay_rfc5549": {
      "description": "Point to Point Underlay with RFC 5549(eBGP), i.e. IPv6 Unnumbered.\nRequires \"underlay_routing_protocol: ebgp\".\n",
      "type": "boolean",
      "default": false,
      "title": "Underlay Rfc5549"
    },
    "underlay_routing_protocol": {
      "type": "string",
      "description": "- The following underlay routing protocols are supported:\n  - EBGP (default for l3ls-evpn)\n  - OSPF.\n  - ISIS.\n  - ISIS-SR*.\n  - ISIS-LDP*.\n  - ISIS-SR-LDP*.\n  - OSPF-LDP*.\n- The variables should be applied to all devices in the fabric.\n*Only supported with core_interfaces data model.\n",
      "enum": [
        "ebgp",
        "ospf",
        "isis",
        "isis-sr",
        "isis-ldp",
        "isis-sr-ldp",
        "ospf-ldp"
      ],
      "title": "Underlay Routing Protocol"
    },
    "uplink_ptp": {
      "description": "Enable PTP on all infrastructure links.",
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "default": false,
          "title": "Enable"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Uplink PTP"
    },
    "use_cv_topology": {
      "type": "boolean",
      "description": "Generate AVD configurations directly from a given CloudVision topology.\nSee `cv_topology` for details.",
      "title": "Use Cv Topology"
    },
    "vtep_vvtep_ip": {
      "description": "IP Address used as Virtual VTEP. Will be configured as secondary IP on Loopback1.\nThis is only needed for centralized routing designs.\n",
      "type": "string",
      "title": "Vtep Vvtep IP"
    },
    "wan_carriers": {
      "description": "PREVIEW: This key is currently not supported\n\nList of carriers used for the WAN configuration and their mapping to path-groups.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier name.",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "description": "Additional information about the carrier for documentation purposes.",
            "title": "Description"
          },
          "path_group": {
            "type": "string",
            "description": "The path-group to which this carrier belongs.",
            "title": "Path Group"
          }
        },
        "required": [
          "path_group",
          "name"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Wan Carriers"
    },
    "wan_ipsec_profiles": {
      "description": "PREVIEW: This key is currently not supported\n\nDefine IPsec profiles parameters for WAN configuration.",
      "type": "object",
      "properties": {
        "control_plane": {
          "type": "object",
          "properties": {
            "ike_policy_name": {
              "type": "string",
              "default": "CP-IKE-POLICY",
              "title": "Ike Policy Name"
            },
            "sa_policy_name": {
              "type": "string",
              "default": "CP-SA-POLICY",
              "title": "Sa Policy Name"
            },
            "profile_name": {
              "type": "string",
              "default": "CP-PROFILE",
              "title": "Profile Name"
            },
            "shared_key": {
              "type": "string",
              "description": "The IPSec shared key.\nThis variable is sensitive and SHOULD be configured using some vault mechanism.",
              "title": "Shared Key"
            }
          },
          "required": [
            "shared_key"
          ],
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Control Plane"
        },
        "data_plane": {
          "type": "object",
          "description": "If `data_plane` is not defined, `control_plane` information is used for both.",
          "properties": {
            "ike_policy_name": {
              "type": "string",
              "default": "DP-IKE-POLICY",
              "title": "Ike Policy Name"
            },
            "sa_policy_name": {
              "type": "string",
              "default": "DP-SA-POLICY",
              "title": "Sa Policy Name"
            },
            "profile_name": {
              "type": "string",
              "default": "DP-PROFILE",
              "title": "Profile Name"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Data Plane"
        }
      },
      "required": [
        "control_plane"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Wan Ipsec Profiles"
    },
    "wan_mode": {
      "description": "PREVIEW: This key is currently not supported\n\nSelect if the WAN should be run using CV Pathfinder or Auto VPN only.",
      "type": "string",
      "default": "cv-pathfinder",
      "enum": [
        "autovpn",
        "cv-pathfinder"
      ],
      "title": "Wan Mode"
    },
    "wan_path_groups": {
      "description": "PREVIEW: This key is currently not supported\nList of path-groups used for the WAN configuration.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Path-group name.",
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "description": "Path-group id.\n\nTODO: Required until an auto ID algorithm is implemented.",
            "title": "ID"
          },
          "description": {
            "type": "string",
            "description": "Additional information about the path-group for documentation purposes.",
            "title": "Description"
          },
          "ipsec": {
            "type": "boolean",
            "description": "Flag to configure IPsec at the path-group level.\n\nWhen set to `true`, IPsec is enabled for both the static and dynamic peers.",
            "default": true,
            "title": "Ipsec"
          },
          "import_path_groups": {
            "type": "array",
            "description": "List of [ath-groups to import in this path-group.",
            "items": {
              "type": "object",
              "properties": {
                "remote": {
                  "type": "string",
                  "description": "Remote path-group to import.",
                  "title": "Remote"
                },
                "local": {
                  "type": "string",
                  "description": "Optional, if not set, the path-group `name` is used as local.",
                  "title": "Local"
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              }
            },
            "title": "Import Path Groups"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        }
      },
      "title": "Wan Path Groups"
    },
    "wan_route_servers": {
      "description": "PREVIEW: This key is currently not supported\n\nList of the AutoVPN RRs when using `wan_mode`=`autovpn`, or the Pathfinders\nwhen using `wan_mode`=`cv-pathfinder`, to which the device should connect to.\n\nWhen the route server is part of the same inventory as the WAN routers,\nonly the name is required.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Route-Reflector hostname.",
            "title": "Hostname"
          },
          "router_id": {
            "type": "string",
            "description": "Route-Reflector router id.",
            "title": "Router ID"
          },
          "path_groups": {
            "type": "array",
            "description": "Path-groups through which the Route Reflector/Pathfinder is reached.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Path-group name.",
                  "title": "Name"
                },
                "interfaces": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Interface name.",
                        "title": "Name"
                      },
                      "ip_address": {
                        "type": "string",
                        "description": "The public IP address of the Route Reflector for this path-group.",
                        "title": "IP Address"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "^_.+$": {}
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "title": "Interfaces"
                }
              },
              "required": [
                "interfaces",
                "name"
              ],
              "additionalProperties": false,
              "patternProperties": {
                "^_.+$": {}
              }
            },
            "title": "Path Groups"
          }
        },
        "additionalProperties": false,
        "patternProperties": {
          "^_.+$": {}
        },
        "required": [
          "hostname"
        ]
      },
      "title": "Wan Route Servers"
    },
    "wan_virtual_topologies": {
      "type": "object",
      "description": "PREVIEW: WAN Preview\n\nConfigure Virtual Topologies for CV Pathfinder and AutoVPN.\n\nAuto create a control plane profile/policy/application and enforce it being first in the default VRF.",
      "properties": {
        "vrfs": {
          "type": "array",
          "description": "Map a VRF that exists in network_services to an AVT policy.\nTODO: missing default VRF behavior",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "VRF name.",
                "title": "Name"
              },
              "policy": {
                "type": "string",
                "description": "Name of the AVT policy to apply to this VRF.",
                "title": "Policy"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            },
            "required": [
              "name"
            ]
          },
          "title": "VRFs"
        },
        "control_plane_virtual_topology": {
          "type": "object",
          "description": "Always injected into the default VRF policy as the first entry.\n\nBy default, if no path-groups are specified, all locally available path-groups\nare used in the generated load-balance policy.\nID is hardcoded to 254 for the AVT profile in CV Pathfinder mode.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Optional name, if not set `CONTROL-PLANE-PROFILE` is used.",
              "title": "Name"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^_.+$": {}
          },
          "title": "Control Plane Virtual Topology"
        },
        "policies": {
          "type": "array",
          "description": "List of virtual toplogies policies.\n\nFor AutoVPN, each item in the list creates:\n  * one policy with:\n      * one `match` entry per `application_virtual_topologies` item\n        they are indexed using `10 * <list_index>` where `list_index` starts at `1`.\n      * one `default-match`\n  * one load-balance policy per `application_virtual_topologies` and one for the `default_virtual_topology`.\n  * if the policy is associated with the default VRF, a special control-plane rule is injected\n    in the policy with index `1` referring to a control-plane load-balance policy as defined under\n    `control_plane_virtual_topology`.\n\n\nFor CV Pathfinder, each item in the list creates:\n  * one policy with:\n      * one `match` entry per `application_virtual_topologies` item ordered as in the model.\n      * one last match entry for the `default` application-profile using `default_virtual_topology` information.\n  * one profile per `application_virtual_topologies` item.\n  * one profile for the `default_virtual_topology`..\n  * one load-balance policy per `application_virtual_topologies`.\n  * one load_balance policy for the `default_virtual_topology`.\n  * if the policy is associated with the default VRF, a special control-plane profile is configured\n    and injected first in the policy assigned to the `default` VRF. This profile points to a\n    control-plane load-balance policy as defined under `control_plane_virtual_topology`.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the AVT policy.",
                "title": "Name"
              },
              "application_virtual_topologies": {
                "type": "array",
                "description": "List of application specific virtual topologies.",
                "items": {
                  "type": "object",
                  "properties": {
                    "application_profile": {
                      "type": "string",
                      "description": "The application profile to use for this virtual topology. It must be a defined `application_profile`.",
                      "title": "Application Profile"
                    },
                    "name": {
                      "type": "string",
                      "description": "Optional name, if not set `<policy_name>-<application_profile>` is used.",
                      "title": "Name"
                    },
                    "id": {
                      "type": "integer",
                      "minimum": 2,
                      "maximum": 253,
                      "description": "ID of the AVT in each VRFs. ID must be unique across all virtual topologies in a policy.\nID 1 is reserved for the default_virtual_toplogy.\nID 254 is reserved for the control_plane_virtual_topology.",
                      "title": "ID"
                    }
                  },
                  "additionalProperties": false,
                  "patternProperties": {
                    "^_.+$": {}
                  },
                  "required": [
                    "application_profile"
                  ]
                },
                "title": "Application Virtual Topologies"
              },
              "default_virtual_topology": {
                "type": "object",
                "description": "Default match for the policy.\nIf no default match should be configured, set `drop_unmatched` to `true`.\nOtherwise, in CV Pathfinder mode, a default AVT profile will be configured with ID 1.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Optional name, if not set `<policy_name>-DEFAULT` is used.",
                    "title": "Name"
                  },
                  "drop_unmatched": {
                    "type": "boolean",
                    "description": "When set, no `catch-all` match is configured for the policy and unmatched traffic is dropped.",
                    "default": false,
                    "title": "Drop Unmatched"
                  }
                },
                "additionalProperties": false,
                "patternProperties": {
                  "^_.+$": {}
                },
                "title": "Default Virtual Topology"
              }
            },
            "required": [
              "default_virtual_topology",
              "name"
            ],
            "additionalProperties": false,
            "patternProperties": {
              "^_.+$": {}
            }
          },
          "title": "Policies"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^_.+$": {}
      },
      "title": "Wan Virtual Topologies"
    }
  },
  "required": [
    "fabric_name"
  ],
  "additionalProperties": true
}