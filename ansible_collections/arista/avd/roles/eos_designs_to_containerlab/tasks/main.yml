---
#tasks file for avd_to_containerlab

- ansible.builtin.setup:
    gather_subset:
      - '!all'
  run_once: true
  delegate_to: CL_1

- name: Check if there is already a topology file with the same name
  stat:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{ containerlab_dir_name }}/{{ containerlab_configuration }}"
  register: stat_result
  run_once: true
  delegate_to: CL_1

- name: Creating run parameters for containerlab destroy
  set_fact:
    containerlab_cmd: "clab destroy -t {{ containerlab_configuration }} \
    --cleanup"
  when: stat_result.stat.exists
  run_once: true
  delegate_to: localhost

- name: Destroy the lab using containerlab in a container
  become: yes
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{ containerlab_dir_name }} \
    ghcr.io/srl-labs/clab {{ containerlab_cmd }} "
  when: containerlab_mode == 'container' and stat_result.stat.exists
  delegate_to: CL_1
  run_once: true

- name: Destroy the lab using installed containerlab 
  become: yes
  command: "{{ containerlab_cmd }}"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{ containerlab_dir_name }}"
  when: containerlab_mode == 'installed' and stat_result.stat.exists
  run_once: true
  delegate_to: CL_1


- name: Remove containerlab output directories
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ containerlab_dir }}"
  delegate_to: localhost
  run_once: true

- name: Create containerlab output directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  loop:
    - "{{ containerlab_dir }}"
    - "{{ containerlab_mapping_dir }}"
    - "{{ containerlab_config_dir }}"
  delegate_to: localhost
  run_once: true

- name: Include device intended structure configuration variables
  delegate_to: localhost
  include_vars: 
    file: "{{ filename }}"
  # errors='ignore' is needed for compatibility with ansible-core < 2.12
  when: structured_config is not defined and lookup('first_found', filename, skip=True, errors='ignore')
  vars:
    filename: "{{ structured_dir }}/{{ inventory_hostname }}.{{ avd_structured_config_file_format }}"

- name: Generate containerlab topology
  delegate_to: localhost
  template:
    src: containerlab_configuration.yml.j2
    dest: "{{ containerlab_dir }}/{{ containerlab_configuration }}"
  run_once: true

- name: Generate custom interface mapping files
  delegate_to: localhost
  template:
    src: containerlab_custom_intf_mapping.j2
    dest: "{{ containerlab_mapping_dir }}/{{ inventory_hostname }}.{{ avd_interface_mapping_file_format }}"
  when: containerlab_custom_interface_mapping

- name: Copy the needed config files
  copy: src={{ eos_config_dir }}/{{ item }}.{{ avd_config_file_format }} dest={{ containerlab_config_dir }}/{{ item }}.{{ avd_config_file_format }}
  with_items:
    - "{{ ansible_play_hosts_all }}"
  run_once: true
  delegate_to: localhost

- name: Create a temporary archive of the containerlab files locally
  delegate_to: localhost
  archive:
    path:
      - "{{ containerlab_dir }}"
    dest: "{{ containerlab_dir }}/tmp_containerlab_archive.gz"
  run_once: true

- name: Remove containerlab directory on the containerlab host 
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  delegate_to: CL_1
  run_once: true
  become: yes

- name: Create required directories on the containerlab host
  delegate_to: CL_1
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  loop:
    - "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  run_once: true

- name: Unarchive the containerlab files to the containerlab host
  delegate_to: CL_1
  unarchive:
    src: "{{ containerlab_dir }}/tmp_containerlab_archive.gz"
    dest: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  run_once: true

- name: Remove the temporary archive of the containerlab files locally
  delegate_to: localhost
  file:
    path: "{{ containerlab_dir }}/tmp_containerlab_archive.gz"
    state: absent
  run_once: true


- name: Creating run parameters for containerlab deploy
  set_fact:
    containerlab_cmd: "clab deploy -t {{ containerlab_configuration }}\
    {% if containerlab_max_workers is defined %} --max-workers {{ containerlab_max_workers }}{% endif %}\
    {% if containerlab_timeout is defined %} --timeout {{ containerlab_timeout }}{% endif %}\
    {% if containerlab_skip_post_deploy is defined %}{% if containerlab_skip_post_deploy %} --skip-post-deploy {% endif %}{% endif %}\
    {% if containerlab_debug is defined %}{% if containerlab_debug %} -d {% endif %}{% endif %}"
  delegate_to: localhost
  run_once: true

- name: Deploy the lab using containerlab in a container
  become: yes
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{ containerlab_dir_name }} \
    ghcr.io/srl-labs/clab {{ containerlab_cmd }} "
  when: containerlab_mode == 'container'
  delegate_to: CL_1
  run_once: true

- name: Deploy the lab using installed containerlab
  become: yes
  command: "{{ containerlab_cmd }} "
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{ containerlab_dir_name }}"
  when: containerlab_mode == 'installed'
  delegate_to: CL_1
  run_once: true
