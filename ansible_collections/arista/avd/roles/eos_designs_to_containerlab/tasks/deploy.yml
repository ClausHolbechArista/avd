---
#tasks file for containerlab hosts

- ansible.builtin.setup:
    # gather_subset:
    #   - '!all'
    filter:
      - 'ansible_env'

- name: Check if more than one containerlab host is defined
  set_fact:
    multinode: "{{ true if groups['CONTAINERLAB']|length > 1 else false }}"
  run_once: true
  delegate_to: localhost

- name: Check if there is already a topology file with the same name
  stat:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{inventory_hostname}}_{{ containerlab_configuration }}"
  register: stat_result

- name: Destroy the lab using containerlab in a container
  become: yes
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab clab destroy -t {{inventory_hostname}}_{{ containerlab_configuration }} --cleanup "
  when: containerlab_mode == 'container' and stat_result.stat.exists

- name: Destroy the lab using installed containerlab 
  become: yes
  command: "clab destroy -t {{inventory_hostname}}_{{ containerlab_configuration }} --cleanup"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: containerlab_mode == 'installed' and stat_result.stat.exists

- name: Include connections per containerlab host variables
  delegate_to: localhost
  include_vars: 
    file: "{{ containerlab_dir }}/containerlab_host_connections.yml"
    name: connections_per_host
  run_once: true

- name: Remove the temporary file with connections per containerlab host
  delegate_to: localhost
  file:
    path: "{{ containerlab_dir }}/containerlab_host_connections.yml"
    state: absent
  run_once: true

- name: Include AVD nodes
  delegate_to: localhost
  include_vars: 
    file: "{{ containerlab_dir }}/temp_AVD_ansible_hosts.yml"
    name: avd_nodes_all
  run_once: true

- name: Remove the temporary file with AVD hosts
  delegate_to: localhost
  file:
    path: "{{ containerlab_dir }}/temp_AVD_ansible_hosts.yml"
    state: absent
  run_once: true

- name: Generate temporary containerlab host to avd nodes mapping
  delegate_to: localhost
  template:
    src: containerlab_host_avd_nodes.yml.j2
    dest: "{{ containerlab_dir }}/containerlab_host_avd_nodes.yml"
  run_once: true

- name: Include containerlab host to avd nodes mapping
  delegate_to: localhost
  include_vars: 
    file: "{{ containerlab_dir }}/containerlab_host_avd_nodes.yml"
    name: clab_to_avd_nodes_mapping
  run_once: true

- name: Remove the temporary containerlab host to avd nodes mapping
  delegate_to: localhost
  file:
    path: "{{ containerlab_dir }}/containerlab_host_avd_nodes.yml"
    state: absent
  run_once: true

- name: Generate containerlab topology
  delegate_to: localhost
  template:
    src: containerlab_configuration.yml.j2
    dest: "{{ containerlab_dir }}/{{ inventory_hostname }}_{{ containerlab_configuration }}"

- name: Generate containerlab vxlan command script
  delegate_to: localhost
  template:
    src: containerlab_vxlan_commands.yml.j2
    dest: "{{ containerlab_dir }}/{{ inventory_hostname }}_vxlan_commands.sh"
    mode: "755"
  when: multinode

- name: Generate containerlab vxlan interface delete script
  delegate_to: localhost
  template:
    src: containerlab_vxlan_interface_delete.yml.j2
    dest: "{{ containerlab_dir }}/{{ inventory_hostname }}_vxlan_interface_delete.sh"
    mode: "755"
  when: multinode

- name: Create local containerlab output directories per containerlab host
  delegate_to: localhost
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  loop:
    - "{{ output_dir }}/{{ containerlab_dir_name }}/{{ inventory_hostname }}_{{ containerlab_mapping_dir_name }}"
    - "{{ output_dir }}/{{ containerlab_dir_name }}/{{ inventory_hostname }}_{{ containerlab_config_dir_name }}"

- name: Copy the needed config files per containerlab host
  delegate_to: localhost
  copy: src={{ eos_config_dir }}/{{ item }}.{{ avd_config_file_format }} dest={{ output_dir }}/{{ containerlab_dir_name }}/{{ inventory_hostname }}_{{ containerlab_config_dir_name }}/{{ item }}.{{ avd_config_file_format }}
  with_items:
    - "{{ clab_to_avd_nodes_mapping[inventory_hostname] }}"

- name: Copy the needed interface mapping files per containerlab host
  delegate_to: localhost
  copy: src={{ containerlab_mapping_dir }}/{{ item }}.{{ avd_interface_mapping_file_format }} dest={{ output_dir }}/{{ containerlab_dir_name }}/{{ inventory_hostname }}_{{ containerlab_mapping_dir_name }}/{{ item }}.{{ avd_interface_mapping_file_format }}
  with_items:
    - "{{ clab_to_avd_nodes_mapping[inventory_hostname] }}"

- name: Remove the temporary interface mapping directory
  delegate_to: localhost
  file:
    path: "{{ containerlab_mapping_dir }}"
    state: absent
  run_once: true

- name: Create a temporary archive of the containerlab files locally per containerlab host
  delegate_to: localhost
  archive:
    path:
      - "{{ containerlab_dir }}/{{ inventory_hostname }}*"
    dest: "{{ containerlab_dir }}/{{ inventory_hostname }}_tmp_containerlab_archive.gz"

- name: Remove containerlab directory on the containerlab host 
  file:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
    state: absent
  become: yes

- name: Create required directories on the containerlab host
  file:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
    state: directory
    mode: 0775

- name: Unarchive the containerlab files to the containerlab host
  unarchive:
    src: "{{ containerlab_dir }}/{{ inventory_hostname }}_tmp_containerlab_archive.gz"
    dest: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"

- name: Remove the temporary archive of the containerlab files locally
  delegate_to: localhost
  file:
    path: "{{ containerlab_dir }}/{{ inventory_hostname }}_tmp_containerlab_archive.gz"
    state: absent

- name: Delete vxlan interfaces which will be used by the new lab
  become: yes
  command: "bash {{ inventory_hostname }}_vxlan_interface_delete.sh"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: multinode
  ignore_errors: yes

- name: Creating run parameters for containerlab deploy
  set_fact:
    containerlab_cmd: "\
    {% if containerlab_max_workers is defined %} --max-workers {{ containerlab_max_workers }}{% endif %}\
    {% if containerlab_timeout is defined %} --timeout {{ containerlab_timeout }}{% endif %}\
    {% if containerlab_skip_post_deploy is defined %}{% if containerlab_skip_post_deploy %} --skip-post-deploy {% endif %}{% endif %}\
    {% if containerlab_debug is defined %}{% if containerlab_debug %} -d {% endif %}{% endif %}"
  delegate_to: localhost
  run_once: true

- name: Deploy the lab using containerlab in a container
  become: yes
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab clab deploy -t {{inventory_hostname}}_{{ containerlab_configuration }} {{ containerlab_cmd }} "
  when: containerlab_mode == 'container'

- name: Run the containerlab vxlan commands (container clab)
  become: yes
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab bash {{ inventory_hostname }}_vxlan_commands.sh "
  when: multinode and containerlab_mode == 'container'

- name: Deploy the lab using installed containerlab
  become: yes
  command: "clab deploy -t {{inventory_hostname}}_{{ containerlab_configuration }} {{ containerlab_cmd }} "
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: containerlab_mode == 'installed'

- name: Run the containerlab vxlan commands (installed clab)
  become: yes
  command: "bash {{ inventory_hostname }}_vxlan_commands.sh"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: multinode and containerlab_mode == 'installed'

