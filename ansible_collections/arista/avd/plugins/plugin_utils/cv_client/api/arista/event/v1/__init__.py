# Copyright (c) 2023 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: arista/event.v1/event.proto, arista/event.v1/services.gen.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import (
    subscriptions as __subscriptions__,
    time as __time__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class EventSeverity(betterproto.Enum):
    """EventSeverity is the severity level of the event"""

    EVENT_SEVERITY_UNSPECIFIED = 0
    EVENT_SEVERITY_INFO = 1
    EVENT_SEVERITY_WARNING = 2
    EVENT_SEVERITY_ERROR = 3
    EVENT_SEVERITY_CRITICAL = 4


class ComponentType(betterproto.Enum):
    """
    ComponentType describes the type of entity on which the event occured
    """

    COMPONENT_TYPE_UNSPECIFIED = 0
    COMPONENT_TYPE_DEVICE = 1
    COMPONENT_TYPE_INTERFACE = 2
    COMPONENT_TYPE_TURBINE = 3


@dataclass(eq=False, repr=False)
class EventComponent(betterproto.Message):
    """EventComponent describes an entity on which the event occured"""

    type: "ComponentType" = betterproto.enum_field(1)
    """type is the type of component"""

    components: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """components identifies the entity on which the event occured"""


@dataclass(eq=False, repr=False)
class EventComponents(betterproto.Message):
    """EventComponents contains entities on which an event occured"""

    components: List["EventComponent"] = betterproto.message_field(1)
    """components describes the components on which an event occured"""


@dataclass(eq=False, repr=False)
class EventAck(betterproto.Message):
    """EventAck contains acknowledgement information of an event"""

    ack: Optional[bool] = betterproto.message_field(1, wraps=betterproto.TYPE_BOOL)
    """ack is the acknowledgement state of an event"""

    acker: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    """acker is the user that acknowledged the event"""

    ack_time: datetime = betterproto.message_field(3)
    """ack_time is the time of acknowledgement"""


@dataclass(eq=False, repr=False)
class EventNoteConfig(betterproto.Message):
    """EventNoteConfig configures a note"""

    note: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    """note is the text of the note"""


@dataclass(eq=False, repr=False)
class EventNote(betterproto.Message):
    """Eventnote is the state of a note"""

    note: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    """note is the text of the note"""

    note_creator: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    """note_creator is the creator of the note"""


@dataclass(eq=False, repr=False)
class EventKey(betterproto.Message):
    """EventKey uniquely identifies an event"""

    key: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    """key is the event data identifier"""

    timestamp: datetime = betterproto.message_field(2)
    """timestamp is the time the event occured"""


@dataclass(eq=False, repr=False)
class EventData(betterproto.Message):
    """EventData is additional event data"""

    data: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """data is event data specific to the type of this event"""


@dataclass(eq=False, repr=False)
class EventNotesConfig(betterproto.Message):
    """EventNotesConfig configures the notes of an event"""

    notes: Dict[int, "EventNoteConfig"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    """notes is keyed by desired note time in Unix time, in milliseconds"""


@dataclass(eq=False, repr=False)
class EventAnnotationConfig(betterproto.Message):
    """EventAnnotationConfig configures an event annotation"""

    key: "EventKey" = betterproto.message_field(1)
    """key is the event instance identifier"""

    ack: Optional[bool] = betterproto.message_field(2, wraps=betterproto.TYPE_BOOL)
    """ack is the acknowledgement state of an event"""

    notes: "EventNotesConfig" = betterproto.message_field(3)
    """notes is the notes on an event"""


@dataclass(eq=False, repr=False)
class EventNotes(betterproto.Message):
    """EventNotes is the notes of an event state"""

    notes: Dict[int, "EventNote"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    """notes is keyed by the time desired"""


@dataclass(eq=False, repr=False)
class Event(betterproto.Message):
    """Event is a telemetry event"""

    key: "EventKey" = betterproto.message_field(1)
    """key is the event instance identifier"""

    severity: "EventSeverity" = betterproto.enum_field(2)
    """severity is the severity of the event"""

    title: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    """title is the title of the event"""

    description: Optional[str] = betterproto.message_field(
        4, wraps=betterproto.TYPE_STRING
    )
    """description is the description of the event"""

    event_type: Optional[str] = betterproto.message_field(
        5, wraps=betterproto.TYPE_STRING
    )
    """event_type is the type of the event"""

    data: "EventData" = betterproto.message_field(6)
    """data is the data of the event"""

    components: "EventComponents" = betterproto.message_field(7)
    """components is the components on which the event occurred"""

    ack: "EventAck" = betterproto.message_field(8)
    """ack is the acknowledgement status of the event"""

    notes: "EventNotes" = betterproto.message_field(9)
    """notes is the notes of the event"""

    last_updated_time: datetime = betterproto.message_field(10)
    """last_updated_time is the time of the most recent update to the event"""


@dataclass(eq=False, repr=False)
class EventRequest(betterproto.Message):
    key: "EventKey" = betterproto.message_field(1)
    """
    Key uniquely identifies a Event instance to retrieve. This value (and all
    fields, unless otherwise specified) must be populated.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data. If no
    time is given, the server will use the time at twhich it makes the request.
    """


@dataclass(eq=False, repr=False)
class EventResponse(betterproto.Message):
    value: "Event" = betterproto.message_field(1)
    """
    Value is the value requested. This structure will be fully-populated as it
    exists in the datastore. If optional fields were not given at creation,
    these fields will be empty or set to default values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the Event
    instance in this response.
    """


@dataclass(eq=False, repr=False)
class EventStreamRequest(betterproto.Message):
    partial_eq_filter: List["Event"] = betterproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
    This requires all provided fields to be equal to the response. While
    transparent to users, this field also allows services to optimize internal
    subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = betterproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
    If this field is populated, at least one of the two time fields are
    required. This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class EventStreamResponse(betterproto.Message):
    value: "Event" = betterproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request. This structure
    will always have its key-field populated. Which other fields are populated,
    and why, depends on the value of Operation and what triggered this
    notification.
    """

    time: datetime = betterproto.message_field(2)
    """Time holds the timestamp of this Event's last modification."""

    type: "__subscriptions__.Operation" = betterproto.enum_field(3)
    """
    Operation indicates how the Event value in this response should be
    considered. Under non-subscribe requests, this value should always be
    INITIAL. In a subscription, once all initial data is streamed and the
    client begins to receive modification updates, you should not see INITIAL
    again.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigRequest(betterproto.Message):
    key: "EventKey" = betterproto.message_field(1)
    """
    Key uniquely identifies a EventAnnotationConfig instance to retrieve. This
    value (and all fields, unless otherwise specified) must be populated.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data. If no
    time is given, the server will use the time at twhich it makes the request.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigResponse(betterproto.Message):
    value: "EventAnnotationConfig" = betterproto.message_field(1)
    """
    Value is the value requested. This structure will be fully-populated as it
    exists in the datastore. If optional fields were not given at creation,
    these fields will be empty or set to default values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
    EventAnnotationConfig instance in this response.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigStreamRequest(betterproto.Message):
    partial_eq_filter: List["EventAnnotationConfig"] = betterproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
    This requires all provided fields to be equal to the response. While
    transparent to users, this field also allows services to optimize internal
    subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = betterproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
    If this field is populated, at least one of the two time fields are
    required. This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigStreamResponse(betterproto.Message):
    value: "EventAnnotationConfig" = betterproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request. This structure
    will always have its key-field populated. Which other fields are populated,
    and why, depends on the value of Operation and what triggered this
    notification.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time holds the timestamp of this EventAnnotationConfig's last modification.
    """

    type: "__subscriptions__.Operation" = betterproto.enum_field(3)
    """
    Operation indicates how the EventAnnotationConfig value in this response
    should be considered. Under non-subscribe requests, this value should
    always be INITIAL. In a subscription, once all initial data is streamed and
    the client begins to receive modification updates, you should not see
    INITIAL again.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigSetRequest(betterproto.Message):
    value: "EventAnnotationConfig" = betterproto.message_field(1)
    """
    EventAnnotationConfig carries the value to set into the datastore. See the
    documentation on the EventAnnotationConfig struct for which fields are
    required.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigSetResponse(betterproto.Message):
    value: "EventAnnotationConfig" = betterproto.message_field(1)
    """
    Value carries all the values given in the EventAnnotationConfigSetRequest
    as well as any server-generated values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
    creation. The only guarantees made about this timestamp are:    - it is
    after the time the request was received    - a time-ranged query with
    StartTime==CreatedAt will include this instance.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigDeleteRequest(betterproto.Message):
    key: "EventKey" = betterproto.message_field(1)
    """
    Key indicates which EventAnnotationConfig instance to remove. This field
    (and all keys, unless otherwise specified) must always be set.
    """


@dataclass(eq=False, repr=False)
class EventAnnotationConfigDeleteResponse(betterproto.Message):
    key: "EventKey" = betterproto.message_field(1)
    """
    Key echoes back the key of the deleted EventAnnotationConfig instance.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
    deletion. The only guarantees made about this timestamp are:    - it is
    after the time the request was received    - a time-ranged query with
    StartTime==DeletedAt will not include this instance.
    """


class EventServiceStub(betterproto.ServiceStub):
    async def get_one(
        self,
        event_request: "EventRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventResponse":
        return await self._unary_unary(
            "/arista.event.v1.EventService/GetOne",
            event_request,
            EventResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all(
        self,
        event_stream_request: "EventStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EventStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.event.v1.EventService/GetAll",
            event_stream_request,
            EventStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        event_stream_request: "EventStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EventStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.event.v1.EventService/Subscribe",
            event_stream_request,
            EventStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class EventAnnotationConfigServiceStub(betterproto.ServiceStub):
    async def get_one(
        self,
        event_annotation_config_request: "EventAnnotationConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventAnnotationConfigResponse":
        return await self._unary_unary(
            "/arista.event.v1.EventAnnotationConfigService/GetOne",
            event_annotation_config_request,
            EventAnnotationConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all(
        self,
        event_annotation_config_stream_request: "EventAnnotationConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EventAnnotationConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.event.v1.EventAnnotationConfigService/GetAll",
            event_annotation_config_stream_request,
            EventAnnotationConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        event_annotation_config_stream_request: "EventAnnotationConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EventAnnotationConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.event.v1.EventAnnotationConfigService/Subscribe",
            event_annotation_config_stream_request,
            EventAnnotationConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set(
        self,
        event_annotation_config_set_request: "EventAnnotationConfigSetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventAnnotationConfigSetResponse":
        return await self._unary_unary(
            "/arista.event.v1.EventAnnotationConfigService/Set",
            event_annotation_config_set_request,
            EventAnnotationConfigSetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete(
        self,
        event_annotation_config_delete_request: "EventAnnotationConfigDeleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EventAnnotationConfigDeleteResponse":
        return await self._unary_unary(
            "/arista.event.v1.EventAnnotationConfigService/Delete",
            event_annotation_config_delete_request,
            EventAnnotationConfigDeleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class EventServiceBase(ServiceBase):
    async def get_one(self, event_request: "EventRequest") -> "EventResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, event_stream_request: "EventStreamRequest"
    ) -> AsyncIterator["EventStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EventStreamResponse()

    async def subscribe(
        self, event_stream_request: "EventStreamRequest"
    ) -> AsyncIterator["EventStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EventStreamResponse()

    async def __rpc_get_one(
        self, stream: "grpclib.server.Stream[EventRequest, EventResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_all(
        self, stream: "grpclib.server.Stream[EventStreamRequest, EventStreamResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self, stream: "grpclib.server.Stream[EventStreamRequest, EventStreamResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.event.v1.EventService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                EventRequest,
                EventResponse,
            ),
            "/arista.event.v1.EventService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                EventStreamRequest,
                EventStreamResponse,
            ),
            "/arista.event.v1.EventService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                EventStreamRequest,
                EventStreamResponse,
            ),
        }


class EventAnnotationConfigServiceBase(ServiceBase):
    async def get_one(
        self, event_annotation_config_request: "EventAnnotationConfigRequest"
    ) -> "EventAnnotationConfigResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self,
        event_annotation_config_stream_request: "EventAnnotationConfigStreamRequest",
    ) -> AsyncIterator["EventAnnotationConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EventAnnotationConfigStreamResponse()

    async def subscribe(
        self,
        event_annotation_config_stream_request: "EventAnnotationConfigStreamRequest",
    ) -> AsyncIterator["EventAnnotationConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EventAnnotationConfigStreamResponse()

    async def set(
        self, event_annotation_config_set_request: "EventAnnotationConfigSetRequest"
    ) -> "EventAnnotationConfigSetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self,
        event_annotation_config_delete_request: "EventAnnotationConfigDeleteRequest",
    ) -> "EventAnnotationConfigDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[EventAnnotationConfigRequest, EventAnnotationConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[EventAnnotationConfigStreamRequest, EventAnnotationConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[EventAnnotationConfigStreamRequest, EventAnnotationConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_set(
        self,
        stream: "grpclib.server.Stream[EventAnnotationConfigSetRequest, EventAnnotationConfigSetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set(request)
        await stream.send_message(response)

    async def __rpc_delete(
        self,
        stream: "grpclib.server.Stream[EventAnnotationConfigDeleteRequest, EventAnnotationConfigDeleteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.event.v1.EventAnnotationConfigService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                EventAnnotationConfigRequest,
                EventAnnotationConfigResponse,
            ),
            "/arista.event.v1.EventAnnotationConfigService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                EventAnnotationConfigStreamRequest,
                EventAnnotationConfigStreamResponse,
            ),
            "/arista.event.v1.EventAnnotationConfigService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                EventAnnotationConfigStreamRequest,
                EventAnnotationConfigStreamResponse,
            ),
            "/arista.event.v1.EventAnnotationConfigService/Set": grpclib.const.Handler(
                self.__rpc_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                EventAnnotationConfigSetRequest,
                EventAnnotationConfigSetResponse,
            ),
            "/arista.event.v1.EventAnnotationConfigService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                EventAnnotationConfigDeleteRequest,
                EventAnnotationConfigDeleteResponse,
            ),
        }
