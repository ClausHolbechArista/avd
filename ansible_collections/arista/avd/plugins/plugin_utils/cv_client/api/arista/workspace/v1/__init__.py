# Copyright (c) 2023 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: arista/workspace.v1/services.gen.proto, arista/workspace.v1/workspace.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .... import fmp as ___fmp__
from ... import (
    subscriptions as __subscriptions__,
    time as __time__,
)
from ...configstatus import v1 as __configstatus_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class WorkspaceState(betterproto.Enum):
    WORKSPACE_STATE_UNSPECIFIED = 0
    WORKSPACE_STATE_PENDING = 1
    WORKSPACE_STATE_SUBMITTED = 2
    WORKSPACE_STATE_ABANDONED = 3
    WORKSPACE_STATE_CONFLICTS = 4
    WORKSPACE_STATE_ROLLED_BACK = 5


class Request(betterproto.Enum):
    """
    Operations on a workspace that can be requested by a client. These are
    workspace-specific operations. The standard operations Add, Delete, etc.
    are performed via the standard ("core") APIs. This is an asynchronous
    request that returns immediately if the request is valid. The result of the
    operation will be available in WorkspaceStatus when it is generated.
    """

    REQUEST_UNSPECIFIED = 0
    REQUEST_START_BUILD = 1
    REQUEST_CANCEL_BUILD = 2
    REQUEST_SUBMIT = 3
    REQUEST_ABANDON = 4
    REQUEST_ROLLBACK = 5


class ResponseStatus(betterproto.Enum):
    RESPONSE_STATUS_UNSPECIFIED = 0
    RESPONSE_STATUS_SUCCESS = 1
    RESPONSE_STATUS_FAIL = 2


class BuildState(betterproto.Enum):
    BUILD_STATE_UNSPECIFIED = 0
    BUILD_STATE_IN_PROGRESS = 1
    BUILD_STATE_CANCELED = 2
    BUILD_STATE_SUCCESS = 3
    BUILD_STATE_FAIL = 4


class BuildStage(betterproto.Enum):
    """BuildStage is the stage of a workspace build"""

    BUILD_STAGE_UNSPECIFIED = 0
    BUILD_STAGE_INPUT_VALIDATION = 1
    BUILD_STAGE_CONFIGLET_BUILD = 2
    BUILD_STAGE_CONFIG_VALIDATION = 3


@dataclass(eq=False, repr=False)
class RequestParams(betterproto.Message):
    """RequestParams is the parameters associated with a WorkspaceRequest"""

    request_id: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class Response(betterproto.Message):
    """
    Response is the response to the last Request, typically errors in
    processing
    """

    status: "ResponseStatus" = betterproto.enum_field(1)
    message: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)


@dataclass(eq=False, repr=False)
class Responses(betterproto.Message):
    """
    Responses is the map of all request ID to response that are processed so
    far
    """

    values: Dict[str, "Response"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WorkspaceKey(betterproto.Message):
    """WorkspaceKey is the key to get a workspace's status"""

    workspace_id: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class WorkspaceConfig(betterproto.Message):
    """
    WorkspaceConfig represents the configurable parameters of a workspace
    """

    key: "WorkspaceKey" = betterproto.message_field(1)
    display_name: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    description: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    request: "Request" = betterproto.enum_field(4)
    request_params: "RequestParams" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class Workspace(betterproto.Message):
    """Workspace is the status of a workspace"""

    key: "WorkspaceKey" = betterproto.message_field(1)
    created_at: datetime = betterproto.message_field(2)
    created_by: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    last_modified_at: datetime = betterproto.message_field(4)
    last_modified_by: Optional[str] = betterproto.message_field(
        5, wraps=betterproto.TYPE_STRING
    )
    state: "WorkspaceState" = betterproto.enum_field(6)
    last_build_id: Optional[str] = betterproto.message_field(
        7, wraps=betterproto.TYPE_STRING
    )
    responses: "Responses" = betterproto.message_field(8)
    cc_ids: "___fmp__.RepeatedString" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class InputError(betterproto.Message):
    """
    InputError represents an error in an input field, with either schema or
    value
    """

    field_id: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    path: "___fmp__.RepeatedString" = betterproto.message_field(2)
    members: "___fmp__.RepeatedString" = betterproto.message_field(3)
    message: Optional[str] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)


@dataclass(eq=False, repr=False)
class InputErrors(betterproto.Message):
    """InputErrors is the nullable list of InputError"""

    values: List["InputError"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InputValidationResult(betterproto.Message):
    """InputValidationResult is the result of input validation of a studio"""

    input_schema_errors: "InputErrors" = betterproto.message_field(1)
    input_value_errors: "InputErrors" = betterproto.message_field(2)
    other_errors: "___fmp__.RepeatedString" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class InputValidationResults(betterproto.Message):
    """
    InputValidationResults is the result of input validation, one per studio
    """

    values: Dict[str, "InputValidationResult"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class TemplateError(betterproto.Message):
    """
    TemplateError represents a single error generated by a template evaluation
    """

    line_num: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )
    exception: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    detail: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)


@dataclass(eq=False, repr=False)
class TemplateErrors(betterproto.Message):
    """TemplateErrors is the nullable list of TemplateError"""

    values: List["TemplateError"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ConfigletBuildResult(betterproto.Message):
    """ConfigletBuildResult is the output of configlet (template) build"""

    template_errors: "TemplateErrors" = betterproto.message_field(1)
    generated_config: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class ConfigletBuildResults(betterproto.Message):
    """
    ConfigletBuildResults is the output of configlet build, one per studio
    """

    values: Dict[str, "ConfigletBuildResult"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ConfigValidationResult(betterproto.Message):
    """
    ConfigValidationResult is the result of validating config with an EOS
    device
    """

    summary: "__configstatus_v1__.ConfigSummary" = betterproto.message_field(1)
    errors: "__configstatus_v1__.ConfigErrors" = betterproto.message_field(2)
    warnings: "__configstatus_v1__.ConfigErrors" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BuildResult(betterproto.Message):
    """BuildResult is the per-device build output"""

    state: "BuildState" = betterproto.enum_field(1)
    stage: "BuildStage" = betterproto.enum_field(2)
    input_validation_results: "InputValidationResults" = betterproto.message_field(3)
    configlet_build_results: "ConfigletBuildResults" = betterproto.message_field(4)
    config_validation_result: "ConfigValidationResult" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BuildResults(betterproto.Message):
    """
    BuildResults is the build output for all devices, indexed by device ID
    """

    values: Dict[str, "BuildResult"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WorkspaceBuildKey(betterproto.Message):
    """WorkspaceBuildKey is the key to get the build result for a workspace"""

    workspace_id: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    """workspace_id is a required field which represents workspace ID"""

    build_id: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    """build_id is a required field which represents build ID"""


@dataclass(eq=False, repr=False)
class WorkspaceBuild(betterproto.Message):
    """
    WorkspaceBuild is the result, or output of a workspace build This includes
    results for all devices across all studios in the workspace
    """

    key: "WorkspaceBuildKey" = betterproto.message_field(1)
    state: "BuildState" = betterproto.enum_field(2)
    build_results: "BuildResults" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkspaceRequest(betterproto.Message):
    key: "WorkspaceKey" = betterproto.message_field(1)
    """
    Key uniquely identifies a Workspace instance to retrieve. This value must
    be populated.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data. If no
    time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceResponse(betterproto.Message):
    value: "Workspace" = betterproto.message_field(1)
    """
    Value is the value requested. This structure will be fully-populated as it
    exists in the datastore. If optional fields were not given at creation,
    these fields will be empty or set to default values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the Workspace
    instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceStreamRequest(betterproto.Message):
    partial_eq_filter: List["Workspace"] = betterproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
    This requires all provided fields to be equal to the response. While
    transparent to users, this field also allows services to optimize internal
    subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = betterproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
    If this field is populated, at least one of the two time fields are
    required. This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceStreamResponse(betterproto.Message):
    value: "Workspace" = betterproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request. This structure
    will always have its key-field populated. Which other fields are populated,
    and why, depends on the value of Operation and what triggered this
    notification.
    """

    time: datetime = betterproto.message_field(2)
    """Time holds the timestamp of this Workspace's last modification."""

    type: "__subscriptions__.Operation" = betterproto.enum_field(3)
    """
    Operation indicates how the Workspace value in this response should be
    considered. Under non-subscribe requests, this value should always be
    INITIAL. In a subscription, once all initial data is streamed and the
    client begins to receive modification updates, you should not see INITIAL
    again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildRequest(betterproto.Message):
    key: "WorkspaceBuildKey" = betterproto.message_field(1)
    """
    Key uniquely identifies a WorkspaceBuild instance to retrieve. This value
    must be populated.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data. If no
    time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildResponse(betterproto.Message):
    value: "WorkspaceBuild" = betterproto.message_field(1)
    """
    Value is the value requested. This structure will be fully-populated as it
    exists in the datastore. If optional fields were not given at creation,
    these fields will be empty or set to default values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
    WorkspaceBuild instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildStreamRequest(betterproto.Message):
    partial_eq_filter: List["WorkspaceBuild"] = betterproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
    This requires all provided fields to be equal to the response. While
    transparent to users, this field also allows services to optimize internal
    subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = betterproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
    If this field is populated, at least one of the two time fields are
    required. This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceBuildStreamResponse(betterproto.Message):
    value: "WorkspaceBuild" = betterproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request. This structure
    will always have its key-field populated. Which other fields are populated,
    and why, depends on the value of Operation and what triggered this
    notification.
    """

    time: datetime = betterproto.message_field(2)
    """Time holds the timestamp of this WorkspaceBuild's last modification."""

    type: "__subscriptions__.Operation" = betterproto.enum_field(3)
    """
    Operation indicates how the WorkspaceBuild value in this response should be
    considered. Under non-subscribe requests, this value should always be
    INITIAL. In a subscription, once all initial data is streamed and the
    client begins to receive modification updates, you should not see INITIAL
    again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigRequest(betterproto.Message):
    key: "WorkspaceKey" = betterproto.message_field(1)
    """
    Key uniquely identifies a WorkspaceConfig instance to retrieve. This value
    must be populated.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the time for which you are interested in the data. If no
    time is given, the server will use the time at which it makes the request.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigResponse(betterproto.Message):
    value: "WorkspaceConfig" = betterproto.message_field(1)
    """
    Value is the value requested. This structure will be fully-populated as it
    exists in the datastore. If optional fields were not given at creation,
    these fields will be empty or set to default values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time carries the (UTC) timestamp of the last-modification of the
    WorkspaceConfig instance in this response.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigStreamRequest(betterproto.Message):
    partial_eq_filter: List["WorkspaceConfig"] = betterproto.message_field(1)
    """
    PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
    This requires all provided fields to be equal to the response. While
    transparent to users, this field also allows services to optimize internal
    subscriptions if filter(s) are sufficiently specific.
    """

    time: "__time__.TimeBounds" = betterproto.message_field(3)
    """
    TimeRange allows limiting response data to within a specified time window.
    If this field is populated, at least one of the two time fields are
    required. This field is not allowed in the Subscribe RPC.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigStreamResponse(betterproto.Message):
    value: "WorkspaceConfig" = betterproto.message_field(1)
    """
    Value is a value deemed relevant to the initiating request. This structure
    will always have its key-field populated. Which other fields are populated,
    and why, depends on the value of Operation and what triggered this
    notification.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time holds the timestamp of this WorkspaceConfig's last modification.
    """

    type: "__subscriptions__.Operation" = betterproto.enum_field(3)
    """
    Operation indicates how the WorkspaceConfig value in this response should
    be considered. Under non-subscribe requests, this value should always be
    INITIAL. In a subscription, once all initial data is streamed and the
    client begins to receive modification updates, you should not see INITIAL
    again.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetRequest(betterproto.Message):
    value: "WorkspaceConfig" = betterproto.message_field(1)
    """
    WorkspaceConfig carries the value to set into the datastore. See the
    documentation on the WorkspaceConfig struct for which fields are required.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigSetResponse(betterproto.Message):
    value: "WorkspaceConfig" = betterproto.message_field(1)
    """
    Value carries all the values given in the WorkspaceConfigSetRequest as well
    as any server-generated values.
    """

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
    creation. The only guarantees made about this timestamp are:    - it is
    after the time the request was received    - a time-ranged query with
    StartTime==CreatedAt will include this instance.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteRequest(betterproto.Message):
    key: "WorkspaceKey" = betterproto.message_field(1)
    """
    Key indicates which WorkspaceConfig instance to remove. This field must
    always be set.
    """


@dataclass(eq=False, repr=False)
class WorkspaceConfigDeleteResponse(betterproto.Message):
    key: "WorkspaceKey" = betterproto.message_field(1)
    """Key echoes back the key of the deleted WorkspaceConfig instance."""

    time: datetime = betterproto.message_field(2)
    """
    Time indicates the (UTC) timestamp at which the system recognizes the
    deletion. The only guarantees made about this timestamp are:    - it is
    after the time the request was received    - a time-ranged query with
    StartTime==DeletedAt will not include this instance.
    """


class WorkspaceServiceStub(betterproto.ServiceStub):
    async def get_one(
        self,
        workspace_request: "WorkspaceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceService/GetOne",
            workspace_request,
            WorkspaceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/GetAll",
            workspace_stream_request,
            WorkspaceStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_stream_request: "WorkspaceStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceService/Subscribe",
            workspace_stream_request,
            WorkspaceStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceBuildServiceStub(betterproto.ServiceStub):
    async def get_one(
        self,
        workspace_build_request: "WorkspaceBuildRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceBuildResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceBuildService/GetOne",
            workspace_build_request,
            WorkspaceBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/GetAll",
            workspace_build_stream_request,
            WorkspaceBuildStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_build_stream_request: "WorkspaceBuildStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceBuildService/Subscribe",
            workspace_build_stream_request,
            WorkspaceBuildStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class WorkspaceConfigServiceStub(betterproto.ServiceStub):
    async def get_one(
        self,
        workspace_config_request: "WorkspaceConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/GetOne",
            workspace_config_request,
            WorkspaceConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/GetAll",
            workspace_config_stream_request,
            WorkspaceConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def subscribe(
        self,
        workspace_config_stream_request: "WorkspaceConfigStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        async for response in self._unary_stream(
            "/arista.workspace.v1.WorkspaceConfigService/Subscribe",
            workspace_config_stream_request,
            WorkspaceConfigStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def set(
        self,
        workspace_config_set_request: "WorkspaceConfigSetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigSetResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/Set",
            workspace_config_set_request,
            WorkspaceConfigSetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete(
        self,
        workspace_config_delete_request: "WorkspaceConfigDeleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "WorkspaceConfigDeleteResponse":
        return await self._unary_unary(
            "/arista.workspace.v1.WorkspaceConfigService/Delete",
            workspace_config_delete_request,
            WorkspaceConfigDeleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WorkspaceServiceBase(ServiceBase):
    async def get_one(
        self, workspace_request: "WorkspaceRequest"
    ) -> "WorkspaceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceStreamResponse()

    async def subscribe(
        self, workspace_stream_request: "WorkspaceStreamRequest"
    ) -> AsyncIterator["WorkspaceStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceStreamResponse()

    async def __rpc_get_one(
        self, stream: "grpclib.server.Stream[WorkspaceRequest, WorkspaceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceStreamRequest, WorkspaceStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceStreamRequest, WorkspaceStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceRequest,
                WorkspaceResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceStreamRequest,
                WorkspaceStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceStreamRequest,
                WorkspaceStreamResponse,
            ),
        }


class WorkspaceBuildServiceBase(ServiceBase):
    async def get_one(
        self, workspace_build_request: "WorkspaceBuildRequest"
    ) -> "WorkspaceBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceBuildStreamResponse()

    async def subscribe(
        self, workspace_build_stream_request: "WorkspaceBuildStreamRequest"
    ) -> AsyncIterator["WorkspaceBuildStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceBuildStreamResponse()

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildRequest, WorkspaceBuildResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, WorkspaceBuildStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceBuildStreamRequest, WorkspaceBuildStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceBuildService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceBuildRequest,
                WorkspaceBuildResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildStreamRequest,
                WorkspaceBuildStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceBuildService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceBuildStreamRequest,
                WorkspaceBuildStreamResponse,
            ),
        }


class WorkspaceConfigServiceBase(ServiceBase):
    async def get_one(
        self, workspace_config_request: "WorkspaceConfigRequest"
    ) -> "WorkspaceConfigResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceConfigStreamResponse()

    async def subscribe(
        self, workspace_config_stream_request: "WorkspaceConfigStreamRequest"
    ) -> AsyncIterator["WorkspaceConfigStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield WorkspaceConfigStreamResponse()

    async def set(
        self, workspace_config_set_request: "WorkspaceConfigSetRequest"
    ) -> "WorkspaceConfigSetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self, workspace_config_delete_request: "WorkspaceConfigDeleteRequest"
    ) -> "WorkspaceConfigDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_one(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigRequest, WorkspaceConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one(request)
        await stream.send_message(response)

    async def __rpc_get_all(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, WorkspaceConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_all,
            stream,
            request,
        )

    async def __rpc_subscribe(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigStreamRequest, WorkspaceConfigStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.subscribe,
            stream,
            request,
        )

    async def __rpc_set(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigSetRequest, WorkspaceConfigSetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set(request)
        await stream.send_message(response)

    async def __rpc_delete(
        self,
        stream: "grpclib.server.Stream[WorkspaceConfigDeleteRequest, WorkspaceConfigDeleteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/arista.workspace.v1.WorkspaceConfigService/GetOne": grpclib.const.Handler(
                self.__rpc_get_one,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigRequest,
                WorkspaceConfigResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/GetAll": grpclib.const.Handler(
                self.__rpc_get_all,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigStreamRequest,
                WorkspaceConfigStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                WorkspaceConfigStreamRequest,
                WorkspaceConfigStreamResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Set": grpclib.const.Handler(
                self.__rpc_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigSetRequest,
                WorkspaceConfigSetResponse,
            ),
            "/arista.workspace.v1.WorkspaceConfigService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                WorkspaceConfigDeleteRequest,
                WorkspaceConfigDeleteResponse,
            ),
        }
